%!PS-Adobe-2.0
%%Creator: dvips 5.490 Copyright 1986, 1992 Radical Eye Software
%%Title: ppopp.dvi
%%Pages: 10 1
%%BoundingBox: 0 0 612 792
%%DocumentFonts: Times-Roman Courier Times-Bold Times-Italic
%%EndComments
%DVIPSCommandLine: dvips ppopp.dvi -o ppopp.ps
%%BeginProcSet: tex.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N /X{S N}
B /TR{translate}N /isls false N /vsize 11 72 mul N /@rigin{isls{[0 -1 1 0 0 0]
concat}if 72 Resolution div 72 VResolution div neg scale isls{Resolution hsize
-72 div mul 0 TR}if Resolution VResolution vsize -72 div 1 add mul TR matrix
currentmatrix dup dup 4 get round 4 exch put dup dup 5 get round 5 exch put
setmatrix}N /@landscape{/isls true N}B /@manualfeed{statusdict /manualfeed
true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N
/IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn begin /FontType 3 N /FontMatrix
fntrx N /FontBBox FBB N string /base X array /BitMaps X /BuildChar{
CharBuilder}N /Encoding IE N end dup{/foo setfont}2 array copy cvx N load 0 nn
put /ctr 0 N[}B /df{/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0
0 sf neg 0 0]N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data
dup length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128
ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127
sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp 0 N
/cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2 index get
S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff ch-yoff ch-height
sub ch-xoff ch-width add ch-yoff setcachedevice ch-width ch-height true[1 0 0
-1 -.1 ch-xoff sub ch-yoff .1 add]{ch-image}imagemask restore}B /D{/cc X dup
type /stringtype ne{]}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1
ne{dup dup length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}
B /I{cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul add
.99 lt{/FV}{/RV}ifelse load def pop}N /eop{SI restore showpage userdict
/eop-hook known{eop-hook}if}N /@start{userdict /start-hook known{start-hook}
if /VResolution X /Resolution X 1000 div /DVImag X /IE 256 array N 0 1 255{IE
S 1 string dup 0 3 index put cvn put}for 65781.76 div /vsize X 65781.76 div
/hsize X}N /p{show}N /RMat[1 0 0 -1 0 0]N /BDot 260 string N /rulex 0 N /ruley
0 N /v{/ruley X /rulex X V}B /V{}B /RV statusdict begin /product where{pop
product dup length 7 ge{0 7 getinterval dup(Display)eq exch 0 4 getinterval
(NeXT)eq or}{pop false}ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale
rulex ruley false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex
ruley scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /FV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail{dup
/delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}B /d{-3 M}
B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{4 M}B /w{0
rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{p 1 w}B /r{p 2 w}
B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p a}B /bos{/SS save N}B
/eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2 index
/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll exec 0 exch 5
-1 roll VResolution Resolution div mul neg 0 0]/Metrics exch def dict begin
Encoding{exch dup type /integertype ne{pop pop 1 sub dup 0 le{pop}{[}ifelse}{
FontMatrix 0 get div Metrics 0 get div def}ifelse}forall Metrics /Metrics
currentdict end def[2 index currentdict end definefont 3 -1 roll makefont
/setfont load]cvx def}def /ObliqueSlant{dup sin S cos div neg}B /SlantFont{4
index mul add}def /ExtendFont{3 -1 roll mul exch}def /ReEncodeFont{/Encoding
exch def}def end
%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N /vs
792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen false N
/rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B /@scaleunit 100 N
/@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit div /vsc X}B /@hsize{/hs
X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{/CLIP 2 N}B /@hoffset{/ho X}B
/@voffset{/vo X}B /@angle{/ang X}B /@rwi{10 div /rwi X /rwiSeen true N}B /@rhi
{10 div /rhi X /rhiSeen true N}B /@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B
/@ury{/ury X}B /magscale true def end /@MacSetUp{userdict /md known{userdict
/md get type /dicttype eq{userdict begin md length 10 add md maxlength ge{/md
md dup length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{
}N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath clippath
mark{transform{itransform moveto}}{transform{itransform lineto}}{6 -2 roll
transform 6 -2 roll transform 6 -2 roll transform{itransform 6 2 roll
itransform 6 2 roll itransform 6 2 roll curveto}}{{closepath}}pathforall
newpath counttomark array astore /gc xdf pop ct 39 0 put 10 fz 0 fs 2
F/|______Courier fnt invertflag{PaintBlack}if}N /txpose{pxs pys scale ppr
aload pop por{noflips{pop S neg S TR pop 1 -1 scale}if xflip yflip and{pop S
neg S TR 180 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0
get neg sub neg TR}if xflip yflip not and{pop S neg S TR pop 180 rotate ppr 3
get ppr 1 get neg sub neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get
neg TR}if}{noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop
pop 90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get
neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr 0
get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add 2 div 3
1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp{pop pop
showpage pm restore}N end}if}if}N /normalscale{Resolution 72 div VResolution
72 div neg scale magscale{DVImag dup scale}if 0 setgray}N /psfts{S 65781.76
div N}N /startTexFig{/psf$SavedState save N userdict maxlength dict begin
/magscale false def normalscale currentpoint TR /psf$ury psfts /psf$urx psfts
/psf$lly psfts /psf$llx psfts /psf$y psfts /psf$x psfts currentpoint /psf$cy X
/psf$cx X /psf$sx psf$x psf$urx psf$llx sub div N /psf$sy psf$y psf$ury
psf$lly sub div N psf$sx psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy
psf$sy div psf$ury sub TR /showpage{}N /erasepage{}N /copypage{}N /p 3 def
@MacSetUp}N /doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto closepath
clip newpath moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{
SDict begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial{CLIP
1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto closepath
clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx sub div rhiSeen{
rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly
sub div dup scale llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly
moveto urx lly lineto urx ury lineto llx ury lineto closepath clip}if
/showpage{}N /erasepage{}N /copypage{}N newpath}N /@endspecial{count ocount
sub{pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N /@defspecial{SDict begin}N /@fedspecial{end}B /li{lineto}B /rl{
rlineto}B /rc{rcurveto}B /np{/SaveX currentpoint /SaveY X N 1 setlinecap
newpath}N /st{stroke SaveX SaveY moveto}N /fil{fill SaveX SaveY moveto}N
/ellipse{/endangle X /startangle X /yrad X /xrad X /savematrix matrix
currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc savematrix
setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300 @start /Fa 2 117
df<1E0006000C000C000C000C00180019E01E30183038303030303030306060606460C460C8C0
C8C0700E147E9313>104 D<04000C000C000C001800FF80180018003000300030003000600061
00610062006400380009127F910D>116 D E /Fb 2 33 df<03C00FF01FF83FFC7FFE7FFEFFFF
FFFFFFFFFFFF7FFE7FFE3FFC1FF80FF003C010107E9115>15 D<00C00000000180000000018000
000001800000000300000000030000000006000000000C000000001C000000003000000000FFFF
FFFFF0FFFFFFFFF030000000001C000000000C0000000006000000000300000000030000000001
800000000180000000018000000000C000000024167D942A>32 D E /Fc
1 117 df<00C001C001C001C00380038003800380FFF00700070007000E000E000E000E001C00
1C001C001C00382038203840384018800F000C1A80990F>116 D E /Fd
134[21 1[30 21 1[14 16 18 1[23 21 23 35 3[12 23 21 1[18 23
18 1[21 12[28 6[39 2[21 16 4[30 2[30 12[21 21 21 21 2[10 14
45[{}29 41.666668 /Times-Bold rf /Fe 134[25 2[25 28 17 19 22
1[28 25 28 41 14 28 1[14 28 25 17 22 28 22 1[25 13[28 2[30
2[47 3[19 1[39 2[36 36 33 36 12[25 25 25 25 2[12 17 45[{}35
50.000000 /Times-Bold rf /Ff 81[18 52[17 1[24 17 17 9 13 11
17 17 17 17 26 9 17 9 9 17 17 11 15 17 15 17 15 3[11 1[11 3[31
2[20 18 22 2[24 1[30 2[13 11 5[22 1[24 5[9 9 17 17 2[17 2[17
17 17 1[8 11 8 44[{}48 33.333332 /Times-Roman rf /Fg 2 122
df<0C000C00CCC0EDC07F800C007F80EDC0CCC00C000C000A0B7D8B10>3
D<1818181818FFFF18181818181818181818181818181808167D900E>121
D E /Fh 81[21 51[16 18 18 28 18 21 12 16 16 21 21 21 21 30
12 18 1[12 21 21 12 18 21 18 21 21 9[35 2[23 21 2[25 30 28
35 23 1[18 14 1[30 25 25 30 28 25 25 6[14 21 3[21 21 2[21 2[10
14 5[14 39[{}51 41.666668 /Times-Italic rf /Fi 1 44 df<0060000060000060000060
00006000006000006000006000006000006000FFFFF0FFFFF00060000060000060000060000060
0000600000600000600000600000600014167E9119>43 D E /Fj 134[29
1[42 1[32 19 23 26 1[32 29 32 48 16 32 1[16 32 29 19 26 32
26 32 29 12[39 1[42 4[55 2[29 23 5[42 1[42 12[29 29 29 29 3[19
45[{}33 58.333336 /Times-Bold rf /Fk 81[21 52[19 3[19 10 15
12 1[19 19 19 29 10 2[10 19 19 12 17 19 17 19 17 12[23 21 5[33
23 2[12 5[25 1[27 7[19 5[19 19 19 19 3[9 44[{}33 37.500000
/Times-Roman rf /Fl 138[22 22 22 22 1[22 22 22 22 22 2[22 22
1[22 22 22 22 22 22 10[22 1[22 3[22 6[22 3[22 22 22 22 22 22
11[22 22 22 22 2[22 22 22 2[22 22 40[{}36 37.500000 /Courier
rf /Fm 2 122 df<040004000400C460F5E03F800E003F80F5E0C4600400040004000B0D7E8D11
>3 D<0C000C000C000C000C000C00FFC0FFC00C000C000C000C000C000C000C000C000C000C00
0C000C000C000C000C000C000C000C000A1A7E9310>121 D E /Fn 47[42
21[18 8[21 1[23 23 3[18 47[18 21 21 30 21 21 12 16 14 21 21
21 21 32 12 21 12 12 21 21 14 18 21 18 21 18 3[14 1[14 1[30
1[39 30 30 25 23 28 30 23 30 30 37 25 30 16 14 30 30 23 25
30 28 28 30 5[12 12 21 21 21 21 21 21 21 21 21 21 12 10 14
10 2[14 14 14 1[35 37[{}78 41.666668 /Times-Roman rf /Fo 81[32
52[29 2[29 29 16 23 3[29 29 1[16 2[16 29 29 19 26 1[26 1[26
19[52 36 6[36 2[39 42 65[{}21 58.333336 /Times-Roman rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
0 bop 363 81 a Fo(Evaluating)15 b(the)f(Locality)g(Bene\256ts)g(of)h(Active)g
(Messages)677 155 y Fn(Ellen)10 b(Spertus)900 140 y Fm(\003)929
155 y Fn(and)g(W)n(illiam)g(J.)h(Dally)583 201 y Fl(ellens@ai.)q(mi)q(t.)q
(edu)q(,)26 b(billd@ai.m)q(it)q(.ed)q(u)692 247 y Fk(Laboratory)8
b(for)i(Computer)f(Science)e(and)727 292 y(Arti\256cial)j(Intelligence)f
(Laboratory)688 338 y(Massachusetts)e(Institute)i(of)h(T)m(echnology)723
388 y(Cambridge,)f(Massachusetts)d(02139)-150 504 y Fj(Abstract)-150
604 y Fn(A)12 b(major)f(challenge)h(in)f(\256ne-grained)h(computing)e(is)i
(achieving)f(locality)-150 653 y(without)h(excessive)j(scheduling)d
(overhead.)26 b(W)m(e)14 b(built)e(two)h(J-Machine)-150 703
y(implementations)c(of)g(a)i(\256ne-grained)e(programming)g(model,)i(the)e
(Berke-)-150 753 y(ley)18 b(Threaded)h(Abstract)e(Machine.)39
b(One)18 b(implementation)f(takes)h(an)-150 803 y(Active)12
b(Messages)h(approach,)g(maintaining)d(a)i(scheduling)f(hierarchy)h(in)-150
853 y(software)17 b(in)f(order)g(to)g(improve)g(data)h(cache)h(performance.)
35 b(Another)-150 902 y(approach)14 b(relies)g(on)f(the)h(J-Machine')n(s)f
(message)j(queues)e(and)g(fast)f(task)-150 952 y(switch,)h(lowering)e(the)h
(control)g(costs)g(at)h(the)f(expense)h(of)f(data)h(locality)m(.)-150
1002 y(Our)j(analysis)g(measures)i(the)e(costs)g(and)g(bene\256ts)h(of)e
(each)j(approach,)-150 1052 y(for)c(a)h(variety)e(of)h(programs)g(and)h
(cache)h(con\256gurations.)29 b(The)16 b(Active)-150 1102 y(Messages)10
b(implementation)d(is)h(strongest)f(when)h(miss)h(penalties)e(are)i(high)-150
1152 y(and)g(for)f(the)h(\256nest-grained)f(programs.)15 b(The)10
b(hardware-buf)o(fered)f(imple-)-150 1201 y(mentation)i(is)i(strongest)e(in)h
(direct-mapped)g(caches,)j(where)e(it)e(achieves)-150 1251
y(substantially)d(better)i(instruction)e(cache)k(performance.)-150
1411 y Fj(1)58 b(Intr)o(oduction)-150 1511 y Fn(Multithreading)12
b(allows)j(processors)g(to)f(hide)h(the)g(long,)g(unpredictable)-150
1561 y(latencies)g(that)f(occur)i(in)e(dynamically-scheduled)g
(\256ne-grained)g(paral-)-150 1611 y(lel)e(programs.)20 b(These)13
b(latencies)f(are)h(due)f(to)f(both)g(communication)g(and)-150
1660 y(synchronization)h(among)i(parallel)g(computations.)24
b(Counteracting)13 b(the)-150 1710 y(bene\256ts)8 b(of)f(multithreading)t(is)
g(the)h(cost)f(of)g(context)f(switching,)h(which)g(in-)-150
1760 y(cludes)j(both)e(direct)h(overhead)h(and)g(the)f(indirect)g(cost)g(of)h
(impaired)f(cache)-150 1810 y(performance)16 b([MB91)o(].)28
b(T)m(wo)15 b(dif)o(ferent)f(approaches)i(to)e(lowering)g(the)-150
1860 y(costs)g(of)g(frequent)g(context)g(switches)g(are)h(bringing)d(the)i
(programming)-150 1910 y(model)h(closer)g(to)g(the)g(architecture)g(\(as)g
(is)g(done)g(by)g(Active)g(Messages)-150 1959 y([vECGS92)o(]\))f(and)f
(bringing)f(the)h(architecture)h(closer)g(to)f(the)h(program-)-150
2009 y(ming)8 b(model')n(s)h(needs)g(\(as)g(is)g(done)f(by)h(the)f(MIT)h
(J-Machine)g([DFK)847 1994 y Fi(+)875 2009 y Fn(92)o(]\).)-150
2059 y(Ideally)m(,)h(both)g(approaches)h(should)e(be)h(explored)g(in)g
(combination.)-108 2112 y(W)m(e)18 b(compare)i(two)e(implementations)f(of)h
(the)g(same)i(programming)-150 2162 y(system,)f(varying)c(the)h(scheduling)f
(hierarchy:)27 b(\(1\))16 b(The)h(Active)f(Mes-)-150 2212 y(sages)8
b(implementation,)f(based)g(directly)f(on)h(Culler)r(')n(s)e(Threaded)j
(Abstract)-150 2262 y(Machine)17 b(\(T)m(AM\))f([CSS)233 2247
y Fi(+)261 2262 y Fn(91)o(,)h(CGSvE93])f(and)h(von)f(Eicken')n(s)h(Active)
-150 2312 y(Messages)f([vECGS92],)g(manages)g(tasks)f(explicitly)e(with)h
(the)g(goal)h(of)-150 2362 y(improving)d(data)i(locality)m(.)25
b(\(2\))14 b(The)g Fh(message-driven)h Fn(implementation)-150
2411 y(\257attens)10 b(T)m(AM')n(s)f(scheduling)f(hierarchy)i(by)f
(exploiting)e(the)i(J-Machine')n(s)-150 2461 y(message)j(queue,)f(requiring)d
(fewer)j(overhead)g(instructions.)p -150 2512 442 2 v -108
2538 a Fg(\003)-90 2550 y Ff(Current)d(address:)i(Microsoft)e(Research,)f(1)h
(Microsoft)f(W)m(ay)n(,)i(Redmond,)d(W)l(A)j(98052.)1037 504
y Fn(W)m(e)j(measure)g(the)f(costs)g(and)g(bene\256ts)g(of)f(the)h(two)f
(systems,)i(quantita-)996 554 y(tively)e(evaluating)g(the)h(claim)h([vECGS92)
o(])g(that)e(using)h(the)g(J-Machine')n(s)996 604 y(message)i(queue)e(as)h(a)
g(task)f(queue)g(hurts)g(cache)h(performance)g(too)f(much)996
653 y(to)g(be)h(useful.)18 b(While)11 b(the)h(message-driven)g(approach)f
(generally)h(incurs)996 703 y(a)g(higher)f(miss)i(rate,)g(its)e(lower)h
(number)f(of)h(total)f(memory)h(accesses,)k(its)996 753 y(better)10
b(instruction)f(cache)j(performance,)h(and)e(its)f(substantially)f(reduced)
996 803 y(overhead)h(more)f(than)h(compensate)g(in)f(many)h(cases,)i
(demonstrating)c(that)996 853 y(buf)o(fered)g(messaging)g(can)h(improve)f(on)
g(the)g(Active)g(Messages)h(approach.)996 902 y(While)f(we)i(focus)f(on)g(T)m
(AM)g(and)g(Active)g(Messages,)i(our)d(work)h(applies)g(to)996
952 y(all)g(\256ne-grained)g(computation)g(occurring)g(on)g(systems)h(with)f
(caches)i(and)996 1002 y(lar)o(ge)f(message)i(queues.)996 1183
y Fe(1.1)50 b(Backgr)o(ound)996 1282 y Fd(1.1.1)41 b(Active)11
b(Messages)996 1382 y Fn(Active)i(Messages)i(is)e(a)h(set)g(of)f
(communication)g(mechanisms)i(that)d(im-)996 1431 y(proves)d(the)g
(performance)h(of)f(lar)o(ge-scale)h(multiprocessors)e(by)h(eliminat-)996
1481 y(ing)e(the)g(need)g(for)g(b)o(uf)o(fering)f(i)o(ncoming)g(messages.)13
b(This)7 b(is)g(accomplished)996 1531 y(by)12 b(requiring)g(message)j
(handlers)d(to)h(be)g(short,)g(restricting)f(them)h(to)g(\(1\))996
1581 y(storing)i(message)k(words)e(\(and)g(any)h(control)e(information\))f
(into)h(user)o(-)996 1631 y(allocated)11 b(memory)h(or)g(\(2\))f(replying)f
(immediately)h(to)g(a)i(simple)e(request)996 1680 y(that)e(does)i(not)e
(require)h(storage)g([vECGS92].)1037 1742 y(The)i(key)f(dif)o(ference)g
(between)h(programming)e(models)h(based)g(on)g(Ac-)996 1791
y(tive)e(Messages)h(and)g(message-driven)g(processing)f(is)g(where)h(the)f
(compu-)996 1841 y(tation)e(is)i(performed.)15 b(In)9 b(purely)f
(message-driven)h(systems,)h(the)f(compu-)996 1891 y(tation)e(is)g(performed)
g(in)f(th)o(e)h(message)g(handlers,)g(i.e.,)h(directly)f(in)g(response)996
1941 y(to)i(incoming)h(messages.)1037 2002 y(In)i(Active)g(Messages,)j(the)d
(computation)f(is)h(performed)g(in)g(the)g(back-)996 2052 y(ground,)c(and)h
(the)f(handlers)g(merely)i(incorporate)d(incoming)h(data)h(into)e(the)996
2102 y(computation.)13 b(Because)d(message)g(handlers)f(are)g(short)f(and)g
(are)h(executed)996 2151 y(at)j(higher)e(priority)g(than)h(the)h
(computation,)f(hardware)h(message)h(buf)o(fer)o(-)996 2201
y(ing)i(is)h(not)g(needed.)34 b(The)17 b(message)h(handlers)e(and)g
(operating)g(system)996 2251 y(work)g(together)f(to)h(schedule)h(tasks,)h
(generating)e(lar)o(ger)g(computations)996 2301 y(than)e(would)f(occur)h(in)g
(a)h(purely)e(message-driven)i(approach.)28 b(Speci\256-)996
2351 y(cally)m(,)14 b(tasks)g(using)e(the)i(same)g(context)f(are)h(scheduled)
g(to)e(run)h(together)n(,)996 2401 y(before)e(switching)f(to)h(a)h(dif)o
(ferent)e(context.)18 b(Coordinating)9 b(tasks)i(from)h(a)996
2450 y(single)h(context)g(creates)j(lar)o(ger)o(-grained)d(computation,)h
(leading)f(to)h(less)996 2500 y(frequent)d(context-switching)f(and,)k
(ideally)m(,)e(better)g(memory)h(usage)g(\(for)996 2550 y(both)c(caches)j
(and)e(registers\))g([vECGS92)o(,)h(CSS)1713 2535 y Fi(+)1740
2550 y Fn(91].)965 2675 y(1)p eop
%%Page: 2 2
1 bop -150 42 a Fd(1.1.2)42 b(The)10 b(MIT)h(J-Machine)-150
119 y Fn(The)19 b(MIT)g(J-Machine,)i(a)e(massively-parallel)f(computer)h
(built)d(using)-150 169 y(Message-Driven)9 b(Processors)h(\(MDPs\),)f(was)h
(designed)e(to)h(support)e(\256ne-)-150 219 y(grained)k(parallel)f
(processing.)17 b(Its)11 b(mechanisms)h(include)f(two)f(complete)-150
269 y(priority)h(levels,)k(each)f(with)e(its)h(own)g(register)g(set)h(and)f
(lar)o(ge)h(\(4)f(Kbyte\))-150 319 y(message)d(queue.)k(When)8
b(a)h(message)h(arrives)e(to)f(the)h(high-priori)o(ty)d(queue,)-150
368 y(low-priority)12 b(computation)i(is)h(preempted.)31 b(Message)16
b(reception)f(does)-150 418 y(not)i(interrupt)e(execution)i(of)h(a)g
(same-priority)e(task;)21 b(dispatch)c(occurs)-150 468 y(when)10
b(the)g(task)h(suspends)f([D)293 453 y Fi(+)320 468 y Fn(87,)h(DFK)466
453 y Fi(+)493 468 y Fn(92].)k(The)c(hardware)g(message)-150
518 y(buf)o(fering)e(has)i(a)g(negligible)d(ef)o(fect)j(on)f(system)h(cost.)
644 503 y Fm(y)-108 568 y Fn(The)d(J-Machine)h(provides)e(a)h(superset)h(of)e
(the)h(base)h(hardware)g(required)-150 617 y(by)15 b(Active)g(Messages.)31
b(Speci\256cally)m(,)17 b(because)f(of)f(the)g(lar)o(ge)h(message)-150
667 y(queues)f(with)f(automatic)h(buf)o(fering,)g(messages)i(need)f(not)e(be)
h(serviced)-150 717 y(immediately)m(.)30 b(The)16 b(designers)f(of)g(Active)g
(Messages)h(considered)f(this)-150 767 y(feature)h(counter)o(-productive,)f
(claiming)g(that)g(the)g(relatively)f(short)h(run)-150 817
y(lengths)10 b(of)h(a)h(message-driven)f(approach)h(signi\256cantly)d(impair)
i(data)g(lo-)-150 867 y(cality)j(by)h(preventing)e(ef)o(\256cient)i(use)h(of)
e(registers)h(and)f(cache)j(memory)-150 916 y([vECGS92)o(,)h(p.)e(261].)32
b(W)m(e)17 b(evaluate)f(this)f(claim,)k(\256nding)14 b(that)i(under)-150
966 y(some)g(circumstances,)i(a)d(message-driven)h(approach)f(provides)f(a)i
(sub-)-150 1016 y(stantial)9 b(improvement.)-150 1126 y Fd(1.1.3)42
b(T)m(AM)-150 1204 y Fn(The)15 b(Berkeley)f(Threaded)h(Abstract)f(Machine)g
(\(T)m(AM\))g([CSS)797 1189 y Fi(+)824 1204 y Fn(91])g(is)g(a)-150
1254 y(\256ne-grained)h(parallel)h(execution)f(model)h(that)f(is)g(used)h(as)
h(a)f(back-end)-150 1304 y(for)e(the)f(implicitly-parallel)e(functional)i
(language)h(Id)g([Nik91)n(].)27 b(An)14 b(Id)-150 1354 y(codeblock)e(is)g
(compiled)g(into)g(a)h(set)f(of)g Fh(inlets)g Fn(and)g Fh(thr)n(eads)p
Fn(,)i(each)f(made)-150 1403 y(up)d(of)g(a)h(sequence)h(of)e(instructions.)k
(Inlets)c(are)i(short)d(message)k(handlers)-150 1453 y(that)j(receive)i(ar)o
(guments)f(from)g(outside)f(the)h(codeblock,)h(and)f(threads)-150
1503 y(are)11 b(sequences)g(of)f(code)h(corresponding)e(to)g(the)h(body)f(of)
h(the)g(codeblock.)-150 1553 y(Operations)j(of)h(unbounded)e(latency)m(,)j
(such)f(as)h(global)e(reads,)i(are)g(split-)-150 1603 y(phased:)30
b(the)18 b(request)g(is)g(initiated)e(in)h(one)h(thread,)i(and)e(the)g(reply)
g(is)-150 1653 y(received)c(in)f(an)g(inlet)g(and)g(used)g(in)g(one)g(or)g
(more)h(other)f(threads.)24 b(Each)-150 1702 y(thread)7 b(has)h(an)f
Fh(entry)h(count)f Fn(indicating)e(the)i(number)g(of)g(inlets)f(and)h
(threads)-150 1752 y(in)12 b(the)h(same)i(codeblock)e(that)f(must)h(run)g
(before)g(it.)23 b(Inlets)12 b(and)h(threads)-150 1802 y(initiate)8
b(threads)i(through)e(the)i Fh(post)g Fn(and)g Fh(fork)g Fn(instructions,)e
(respectively)m(.)-108 1852 y(When)14 b(a)g(codeblock)g(is)g(invoked,)g(a)g
Fh(frame)g Fn(is)g(allocated)g(for)f(storage)-150 1902 y(of)i(ar)o(guments,)i
(local)f(variables,)g(entry)f(counts,)i(and)e(a)h(list)e(of)h(threads)-150
1951 y(associated)j(with)f(the)h(frame)g(that)f(are)i(ready)f(to)f(run.)37
b(When)18 b(one)g(of)-150 2001 y(the)11 b(codeblock')n(s)g(inlets)f(is)h
(executed,)i(it)d(typically)g(writes)g(the)h(incoming)p -150
2037 442 2 v -107 2065 a Fg(y)-90 2077 y Ff(On)i(the)h(J-Machine,)f(messages)
g(are)g(buf)o(fered)g(directly)g(into)h(the)f(top)h(level)f(of)h(the)-150
2116 y(memory)9 b(hierarchy)n(.)17 b(The)10 b(processor)f(control)h(\256nite)
h(state)f(machine)f(includes)g(states)h(that)-150 2156 y(transfer)5
b(messages)t(from)g(the)h(network)t(output)f(register)g(into)g(memory)t(and)g
(pointer)g(registers)-150 2195 y(that)11 b(address)e(the)h(memory)g(during)f
(these)h(transfers;)i(these)e(states)g(and)g(registers)g(account)-150
2235 y(for)h(a)h(tiny)f(fraction)h(of)f(the)g(chip)g(area.)22
b(The)12 b(major)f(cost)g(in)h(buf)o(fering)f(messages)f(is)i(the)-150
2274 y(use)e(of)g(on-chip)f(SRAM)i(space)e(and)h(bandwidth)e(by)i(arriving)g
(messages;)g(however)o(,)g(even)-150 2313 y(under)g(software)g(control,)i
(cache)e(space)g(and)g(memory)g(bandwidth)f(is)j(required)e(to)h(buf)o(fer)
-150 2353 y(most)i(arriving)g(data.)26 b(If)14 b(the)f(network)f(interface)h
(is)g(attached)f(to)i(a)f(lower)g(level)g(of)g(the)-150 2392
y(memory)6 b(hierarchy)n(,)g(as)h(with)g(the)g(CM-5)g([Thi92)o(],)h(even)e
(more)h(scarce)f(memory)g(bandwidth)-150 2432 y(is)k(consumed)d(reading)h
(incoming)g(message)g(data)h(out)g(of)h(the)f(memory-mapped)d(registers.)-150
2471 y(Thus,)11 b(the)f(only)g(advantage)f(to)h(not)g(buf)o(fering)g
(messages)f(is)i(avoiding)e(consuming)g(cache)-150 2511 y(space)g(and)h
(bandwidth)f(for)h(any)g(incoming)f(message)h(data)g(that)g(can)g(be)g
(handled)f(without)-150 2550 y(being)e(written)h(to)h(memory)n(.)996
42 y Fn(value\(s\))i(into)e(the)i(frame)h(and)f(posts)f(a)i(dependent)f
(thread.)17 b(If)10 b(the)h(thread)996 91 y(is)f Fh(non-synchr)n(onizing)e
Fn(\320)i(that)f(is,)i(if)e(it)h(does)g(not)f(have)i(an)f(explicit)f(entry)
996 141 y(count)d(\320)h(a)g(pointer)f(to)g(the)h(thread)g(is)g(placed)g(in)g
(the)g(frame,)i(indicating)c(that)996 191 y(the)12 b(thread)h(may)h(run.)22
b(If)12 b(the)h(thread)g(is)f Fh(synchr)n(onizing)p Fn(,)i(the)e(associated)
996 241 y(entry)e(count)f(is)h(decremented,)i(and)f(a)g(pointer)e(to)g(the)i
(thread)f(is)g(placed)h(in)996 291 y(the)6 b(frame)g(only)g(if)g(the)g(count)
g(has)g(reached)g(zero.)16 b(A)6 b(\252non-synchronizing\272)996
340 y(thread)11 b(has)h(an)g(implicit)e(entry)h(count)g(of)h(one,)g(because)h
(it)e(is)h(enabled)f(on)996 390 y(the)i(\256rst)g(attempt.)24
b(When)14 b(a)g(fork)e(occurs)i(at)g(the)f(end)g(of)g(a)h(thread,)h(it)d(is)
996 440 y(converted)e(by)g(the)g(compiler)g(into)f(a)i(branch)f(when)g
(possible.)1037 491 y(When)15 b(a)g(frame)g(is)f(activated,)i(the)e(frame')n
(s)h(list)e(of)h(ready)h(threads)f(is)996 540 y(considered)g(the)g
Fh(local)g(continuation)d(vector)16 b Fn(\(LCV\),)e(and)h(a)g(specially-)996
590 y(designated)f(entry)g(thread)g(is)g(executed.)29 b(Any)14
b(threads)g(that)g(fork)g(other)996 640 y(threads)7 b(within)e(the)i
(codeblock)f(do)h(so)g(by)f(placing)g(them)h(in)g(the)g(LCV)-5
b(,)7 b(or)n(,)h(if)996 690 y(the)f(fork)g(appears)g(at)g(the)g(end)g(of)g
(the)g(thread,)e(branching)i(directly)m(.)12 b(Threads)996
740 y(are)f(executed)h(from)e(the)g(LCV)h(until)e(none)i(remain,)g(after)g
(which)f(the)h(exit)996 789 y(thread)i(is)g(executed.)24 b(The)14
b(set)f(of)g(threads)g(executed)h(in)e(a)i(single)e(frame)996
839 y(activation)f(is)i(called)f(a)i Fh(quantum)p Fn(.)20 b(T)m(ypically)m(,)
13 b(activation)f(is)g(comprised)996 889 y(of)d(multiple)e(quanta,)j(with)e
(a)i(quantum)e(ending)g(when)i(needed)g(data)f(is)g(not)996
939 y(yet)h(available.)1037 989 y(Entry)f(and)g(exit)g(threads)g(were)h
(intended)f(to)f(take)i(advantage)g(of)f(the)g(lo-)996 1039
y(cality)e(created)g(by)g(multipl)o(e)g(threads)g(in)f(a)h(scheduli)o(ng)g(q)
o(uantum,)e(allowing)996 1089 y(time)14 b(to)f(be)i(saved)g(by)e(having)h(an)
g(entry)g(thread)g(load)g(commonly-used)996 1139 y(frame)9
b(slots)e(into)f(registers)i(where)h(they)e(would)g(remain)h(during)f(the)g
(entire)996 1189 y(scheduling)13 b(quantum.)27 b(At)14 b(the)g(end)h(of)f
(the)g(quantum,)h(the)g(exit)e(thread)996 1239 y(would)d(store)g(them)h(into)
f(frame)i(memory)m(.)18 b(Entry)10 b(and)h(exit)g(threads)g(have)996
1288 y(not)f(been)i(implemented)f(in)f(the)h(T)m(AM)g(compiler)n(,)h(however)
n(,)g(and)f(are)h(not)996 1338 y(included)e(in)h(our)g(analysis.)19
b(Details)11 b(on)g(compiling)f(Id)h(programs)h(to)f(run)996
1388 y(on)f(T)m(AM)g(are)h(available)f(elsewhere)i([Sch91)o(,)f(TCS92].)996
1532 y Fj(2)58 b(T)l(wo)32 b(T)l(AM)f(Implementations)j(for)e(the)h(J-)1083
1607 y(Machine)996 1701 y Fn(T)m(o)10 b(explore)f(the)h(bene\256ts)g(of)f
(Active)h(Messages)h(on)f(a)g(computer)g(with)e(the)996 1750
y(J-Machine')n(s)h(ability)f(to)i(buf)o(fer)f(messages,)j(we)e(implemented)g
(two)f(T)m(AM)996 1800 y(back-ends.)22 b(T)m(AM)12 b(is)g(designed)g(to)g(be)
h(implemented)f(on)g(top)f(of)h(Active)996 1850 y(Messages.)18
b(A)12 b(separate)g(study)e(examines)h(how)g(T)m(AM')n(s)g(performance)g(is)
996 1900 y(af)o(fected)g(by)g(other)f(J-Machine)h(mechanisms,)h(such)f(as)h
(tagged)e(memory)m(,)996 1950 y(automatic)g(dispatch)g(on)h(messages,)i(and)d
(tight)f(processor)o(-network)h(cou-)996 2000 y(pling)d([SGS)1180
1984 y Fi(+)1205 2000 y Fn(93].)14 b(This)7 b(section)g(describes)g(the)g
(two)f(di)o(f)o(ferent)h(J-Machine)996 2049 y(implementations,)i(which)h(are)
h(summarized)g(in)f(T)m(able)h(1.)996 2172 y Fe(2.1)50 b(Active)12
b(Messages)h(Implementation)996 2251 y Fn(The)k(Active)g(Messages)h(\(AM\))e
(implementation)g(of)g(T)m(AM)h(runs)f(short)996 2301 y(message)8
b(handlers)f(at)g(high)f(priority)t(and)h(computation)f(at)h(low)f(priority)m
(,)g(in)996 2351 y(the)i(Active)g(Messages)i(style.)k(Threads)9
b(associated)g(with)e(the)h(same)i(frame)996 2401 y(are)h(scheduled)f
(sequentially)m(.)k(In)c(this)f(implementation,)g(an)h(ar)o(gument)h(to)996
2450 y(a)k(codeblock)f(is)h(sent)f(to)g(an)h(inlet,)g(which)g(runs)f(at)h
(high)e(priority)m(.)26 b(The)996 2500 y(inlet)13 b(places)i(the)f(ar)o
(gument)g(in)g(the)g(frame)h(and)f(posts)g(a)h(thread.)26 b(If)14
b(the)996 2550 y(thread)e(is)f(now)h(ready)g(to)f(run,)i(a)f(pointer)f(to)g
(the)h(thread)g(is)g(placed)g(in)f(the)965 2675 y(2)p eop
%%Page: 3 3
2 bop 232 43 1487 2 v 231 93 2 50 v 257 78 a Fn(T)m(AM)10 b(Mechanism)p
596 93 V 73 w(AM)g(Implementation)p 1157 93 V 220 w(MD)g(Implementation)p
1718 93 V 232 95 1487 2 v 231 144 2 50 v 257 130 a(inlet)p
596 144 V 290 w(high)f(priority)f(message)k(handler)p 1157
144 V 66 w(low)d(priority)f(message)k(handler)p 1718 144 V
231 194 V 257 179 a(post)d(from)h(inlet)p 596 194 V 120 w(place)h(thread)f
(in)g(frame)p 1157 194 V 210 w(jump)f(directly)h(to)f(thread)p
1718 194 V 231 244 V 257 229 a(activation)g(of)h(frame)p 596
244 V 50 w(low)g(priority)e(library)h(routine)p 1157 244 V
113 w(n/a)p 1718 244 V 231 294 V 257 279 a(threads)p 596 294
V 245 w(low)h(priority)e(code)p 1157 294 V 275 w(low)h(priority)f(code)p
1718 294 V 231 344 V 257 329 a(fork)h(from)h(thread)p 596 344
V 91 w(jump)g(or)g(push)g(onto)f(LCV)p 1157 344 V 164 w(jump)g(or)h(push)g
(onto)f(LCV)p 1718 344 V 231 394 V 257 379 a(system)h(routines)p
596 394 V 105 w(high)f(priority)f(message)k(handlers)p 1157
394 V 50 w(high)d(priority)f(message)k(handlers)p 1718 394
V 232 395 1487 2 v 515 469 a(T)m(able)f(1:)j(Mapping)9 b(of)h(T)m(AM)g
(Constructs)f(to)h(the)g(J-Machine)80 1156 y @beginspecial
10 @llx 10 @lly 608 @urx 205 @ury 4320 @rwi @setspecial
%%BeginDocument: levels.ps
%!PS-Adobe-2.0 EPSF-1.2
%%Creator: idraw
%%DocumentFonts: Times-Roman Times-Bold
%%Pages: 1
%%BoundingBox: 10 10 608 205
%%EndComments

/arrowHeight 10 def
/arrowWidth 5 def

/IdrawDict 52 dict def
IdrawDict begin

/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
/Encoding ISOLatin1Encoding def
currentdict end definefont
} def

/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] def
/Times-Roman reencodeISO def
/Times-Bold reencodeISO def

/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
dup -1 eq {
/patternGrayLevel idef
/patternString idef
} {
/patternGrayLevel idef
} ifelse
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 1 printSize sub descender sub def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def
/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

/SSten {
fgred fggreen fgblue setrgbcolor
dup true exch 1 0 0 -1 0 6 -1 roll matrix astore
} def

/FSten {
dup 3 -1 roll dup 4 1 roll exch
newpath
0 0 moveto
dup 0 exch lineto
exch dup 3 1 roll exch lineto
0 lineto
closepath
bgred bggreen bgblue setrgbcolor
eofill
SSten
} def

/Rast {
exch dup 3 1 roll 1 0 0 -1 0 6 -1 roll matrix astore
} def

%%EndProlog

%%BeginIdrawPrologue
/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
arrowHeight neg arrowWidth 2 div moveto
0 0 lineto
arrowHeight neg arrowWidth 2 div neg lineto
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
arrowHeight neg arrowWidth 2 div moveto
0 0 lineto
arrowHeight neg arrowWidth 2 div neg lineto
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

%%EndIdrawPrologue

%I Idraw 10 Grid 8.58525e-40 0 

%%Page: 1 1

Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.799705 0 0 0.799705 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 0 -0.949846 ] concat

Begin %I Line
%I b 65535
2 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 -40 18 ] concat
%I
152 158 184 158 Line
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 184 29 ] concat
%I
[
(\(a\))
] Text
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 -120 -256 ] concat

Begin %I Rect
%I b 65535
2 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
56 22 152 166 Rect
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
56 54 152 54 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
56 70 152 70 Line
%I 1
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
56 86 152 86 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
56 38 64 38 Line
%I 1
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 80 274 ] concat
%I
56 150 152 150 Line
%I 1
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t u

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
64 38 152 38 Line
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 160 469 ] concat
%I
[
(Frame 1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 153 358 ] concat
%I
[
(Foo thread 1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 153 342 ] concat
%I
[
(Foo thread 5)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 153 326 ] concat
%I
[
(Foo thread 4)
] Text
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 -120 -256 ] concat

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 288 469 ] concat
%I
[
(Frame 2)
] Text
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t u

Begin %I Rect
%I b 65535
2 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
184 22 280 166 Rect
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
184 86 280 86 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
184 70 280 70 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
192 54 280 54 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
184 54 192 54 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 80 274 ] concat
%I
184 38 280 38 Line
%I 1
End

Begin %I Line
%I b 65535
1 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 80 274 ] concat
%I
184 150 280 150 Line
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 281 356 ] concat
%I
[
(Bar thread 9)
] Text
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 -120 -256 ] concat

Begin %I Pict
%I b 65535
2 0 0 [] 0 SetB
%I cfg u
%I cbg u
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I p u
%I t
[ 1 0 0 1 -184 0 ] concat

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 78 421 222 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 222 533 222 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
533 222 533 78 Line
%I 1
End

End %I eop

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 400 469 ] concat
%I
[
(Message Queue)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 416 419 ] concat
%I
[
(Frame 1)
] Text
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -29 218 ] concat
%I
421 182 533 182 Line
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 417 436 ] concat
%I
[
(Foo inlet 8)
] Text
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 56 0 ] concat

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 -64 -256 ] concat

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 64 0 ] concat

Begin %I Pict
%I b 65535
2 0 0 [] 0 SetB
%I cfg u
%I cbg u
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I p u
%I t u

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 78 421 222 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 222 533 222 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
533 222 533 78 Line
%I 1
End

End %I eop

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 584 469 ] concat
%I
[
(Message Queue)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 600 435 ] concat
%I
[
(Foo inlet 1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 600 419 ] concat
%I
[
(Frame 1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 600 379 ] concat
%I
[
(Frame 2)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 600 395 ] concat
%I
[
(Bar inlet 6)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 600 339 ] concat
%I
[
(Frame 1)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 600 355 ] concat
%I
[
(Foo inlet 11)
] Text
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 182 533 182 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 142 533 142 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 -0 -0 1 155 218 ] concat
%I
421 102 533 102 Line
%I 1
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 192 -192 ] concat

Begin %I Elli
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 0.0714286 -0 -0 0.0714286 423.5 462.714 ] concat
%I
238 249 12 13 Elli
End

Begin %I Elli
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 0.0714286 -0 -0 0.0714286 423.5 470.714 ] concat
%I
238 249 12 13 Elli
End

Begin %I Elli
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 0.0714286 -0 -0 0.0714286 423.5 478.714 ] concat
%I
238 249 12 13 Elli
End

End %I eop

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 72 0 ] concat

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 472 469 ] concat
%I
[
(LCV)
] Text
End

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t u

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 -0 -0 1 117.5 138.5 ] concat
%I
323 270 419 270 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 -0 -0 1 117.5 154.5 ] concat
%I
323 270 419 270 Line
%I 1
End

Begin %I Rect
%I b 65535
2 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 117.5 114.5 ] concat
%I
323 230 419 326 Rect
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 117.5 114.5 ] concat
%I
323 278 419 278 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 117.5 98.5 ] concat
%I
323 278 419 278 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 -0 -0 1 117.5 82.5 ] concat
%I
323 278 419 278 Line
%I 1
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 457 436 ] concat
%I
[
(Foo thread 4)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 457 420 ] concat
%I
[
(Foo thread 1)
] Text
End

End %I eop

End %I eop

End %I eop

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-140-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 553 31 ] concat
%I
[
(\(b\))
] Text
End

End %I eop

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-bold-r-*-140-*
Times-Bold 14 SetF
%I t
[ 1 0 0 1 174.994 248.204 ] concat
%I
[
(Active Messages)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-bold-r-*-140-*
Times-Bold 14 SetF
%I t
[ 1 0 0 1 585 245.605 ] concat
%I
[
(Message Driven)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f *-times-medium-r-*-120-*
Times-Roman 12 SetF
%I t
[ 1 0 0 1 30.3951 179.123 ] concat
%I
[
(frame queue)
] Text
End

End %I eop

showpage

%%Trailer

end
%%EndDocument
 @endspecial -150 1289 a(Figure)j(1:)21 b(A)14 b(comparison)f(of)g(the)h
(scheduling)f(hierarchies)g(for)g(the)h(two)f(implementations.)24
b(In)13 b(the)h(AM)f(implementation)g(\(a\),)i(messages)g(in)e(the)-150
1339 y(queue)g(are)g(executed)g(at)g(the)f(highest)g(priority)m(,)g(so)g(the)
h(inlet)e(would)g(run)h(next,)i(followed)d(by)h(all)g(the)h(enabled)f
(threads)h(corresponding)e(to)h(Frame)i(1,)-150 1389 y(after)e(which)f(Frame)
i(2)f(would)f(become)i(active.)20 b(In)11 b(the)h(MD)g(implementation)e
(\(b\),)i(inlets)f(are)i(executed)f(at)g(the)g(same)h(priority)c(as)k
(threads,)f(so)g(none)-150 1438 y(of)f(the)g(inlets)f(would)g(be)i(executed)f
(until)f(the)h(LCV)g(is)g(emptied.)18 b(Then,)12 b(each)g(inlet)e(would)g(be)
i(processed,)g(along)f(with)f(any)h(thread)g(it)g(posts)f(\(and)h(the)-150
1488 y(thread')n(s)f(descendants\).)-150 1620 y(frame.)16 b(When)9
b(the)g(processor)g(is)g(otherwise)f(idle,)h(a)h(background)e(process)-150
1670 y(chooses)i(a)g(frame)g(with)e(ready)i(threads,)g(sets)g(the)f(LCV)g
(pointer)f(to)h(the)g(list)-150 1720 y(of)k(threads)g(in)f(the)h(frame,)i
(and)e(branches)h(to)e(the)h(frame')n(s)h(entry)e(thread.)-150
1770 y(When)j(a)f(thread)h(\256nishes,)g(the)g(address)g(of)f(the)g(next)g
(thread)g(is)g(popped)-150 1819 y(from)e(the)g(LCV.)22 b(When)12
b(one)g(thread)h(forks)e(another)n(,)i(the)f(child)g(thread')n(s)-150
1869 y(entry)f(count)f(is)h(decremented.)19 b(If)11 b(the)g(entry)g(count)f
(has)i(reached)g(zero)g(or)-150 1919 y(if)d(the)h(thread)f(is)g
(non-synchronizing,)f(a)i(pointer)e(to)h(the)h(thread)f(is)h(pushed)-150
1969 y(on)g(the)g(LCV.)16 b(The)11 b(last)g(item)f(in)g(the)g(LCV)h(is)f(the)
g(address)h(of)g(the)f(system)-150 2019 y(code)h(to)e(swap)i(in)f(a)h(new)f
(frame.)-108 2102 y(An)j(atomicity)f(problem)g(arises)i(due)f(to)g(allowing)e
(inlets)i(to)f(interrupt)-150 2151 y(threads)j([Spe92)o(].)30
b(Speci\256cally)m(,)16 b(consider)f(the)g(case)h(where)g(the)e(T)m(AM)-150
2201 y(\252fork)f Fc(t)p Fn(\272)g(instruction)e(is)i(interrupted)e(by)h(an)i
(inlet)e(that)g(includes)g(the)h(in-)-150 2251 y(struction)f(\252post)i
Fc(t)p Fn(\272.)26 b(If)14 b(the)g(thread)g(and)f(the)h(inlet)f(belong)g(to)g
(the)h(same)-150 2301 y(codeblock)c(activation,)f(the)h(synchronization)e
(counter)h(for)h(thread)g Fc(t)g Fn(may)-150 2351 y(be)15 b(improperly)e
(decremented.)30 b(Similarly)m(,)16 b(the)e(LCV)h(and)g(the)g(pointer)-150
2401 y(to)c(the)h(top)f(of)g(the)h(LCV)g(are)g(places)h(of)f(contention.)18
b(In)11 b(order)h(to)f(ensure)-150 2450 y(atomic)i(access)i(of)e(data)g
(structures)f(accessible)j(from)e(both)e(threads)i(and)-150
2500 y(inlets,)i(interrupts)f(are)h(disabled)f(during)g(control)f(operations)
h(in)h(thread)-150 2550 y(bodies.)22 b(Other)13 b(Active)f(Messages)j
(implementations)c(avoid)h(this)g(prob-)996 1620 y(lem)7 b(by)g(polling)e
(for)h(messages)j(at)e(permissible)g(points,)g(rather)g(than)f(taking)996
1670 y(interrupts)j([SGS)1256 1655 y Fi(+)1283 1670 y Fn(93].)17
b(In)11 b(Section)g(2.4,)g(we)h(discuss)f(the)f(ef)o(fects)i(of)f(dif-)996
1720 y(ferent)f(policies)f(toward)h(message)i(reception.)996
1862 y Fe(2.2)50 b(Message-Driven)12 b(Implementation)996 1948
y Fn(The)25 b(Message-Driven)g(\(MD\))f(implementation)f(uses)i(the)f
(message)996 1998 y(queues)12 b(as)h(task)e(queues)i(instead)e(of)h
(servicing)f(messages)j(immediately)m(.)996 2048 y(Inlets)9
b(contain)f(branches)i(directly)f(to)g(threads,)h(eliminating)d(the)j(need)g
(for)996 2097 y(storing)e(pointers)h(to)h(ready)g(threads)g(in)g(the)g
(frame.)16 b(Because)c(control)c(can)996 2147 y(be)15 b(transferred)f
(directly)g(from)g(an)h(inlet)f(to)g(a)h(thread,)h(both)e(run)g(at)h(low)996
2197 y(priority)m(.)j(The)13 b(only)e(code)h(that)g(runs)f(at)h(high)f
(priority)f(is)i(that)f(to)g(service)996 2247 y(system)16 b(calls,)j(such)d
(as)h(allocating)e(frames)i(or)f(accessing)i(global)d(data)996
2297 y(structures.)f(As)9 b(in)f(the)h(AM)f(implementation,)g(if)h(a)g
(thread)f(forks)h(multiple)996 2346 y(threads,)k(control)d(is)i(transferred)g
(to)g(one)g(and)g(the)g(others)g(are)h(pushed)e(on)996 2396
y(the)g(LCV.)19 b(When)12 b(a)g(thread)g(that)f(does)h(not)e(end)i(with)e(a)i
(fork)f(completes,)996 2446 y(the)f(next)g(thread)g(address)h(is)f(popped)f
(from)h(the)h(LCV.)1037 2500 y(Unlike)j(in)g(the)h(AM)f(implementation,)h
(atomicity)f(is)h(not)e(a)j(problem)996 2550 y(because)8 b(inlets)e(run)h(at)
g(the)g(same)h(priority)d(as)i(threads)g(and)g(do)g(not)f(interrupt)965
2675 y(3)p eop
%%Page: 4 4
3 bop -150 42 a Fn(them.)-108 91 y(The)13 b(MD)f(implementation')n(s)f
(partial)h(scheduling)f(hierarchy)i(ensures)-150 141 y(that)f(all)g(threads)g
(in)g(the)g(LCV)h(are)g(executed)g(before)g(switching)e(frames.)-150
191 y(While)g(one)g(could)f(totally)g(eliminate)g(scheduling)g(hierarchy)h
(by)g(placing)-150 241 y(threads)j(in)g(the)g(message)h(queue)g(instead)f(of)
f(the)h(frame)h(or)f(LCV)-5 b(,)14 b(there)-150 291 y(would)f(be)h(no)g
(purpose)g(in)f(doing)g(so,)j(since)e(this)g(would)f(sacri\256ce)i(data)-150
340 y(and)10 b(control)f(locality)g(without)f(improving)h(overhead.)-150
458 y Fe(2.3)50 b(Comparison)12 b(of)g(Implementations)-150
536 y Fn(The)k(MDP)f(mechanisms)h(for)f(the)g(two)g(implementations)f(are)h
(summa-)-150 586 y(rized)9 b(in)f(T)m(able)i(1.)15 b(The)10
b(order)e(of)h(thread)g(and)g(inlet)f(execution)g(for)h(sample)-150
635 y(message)17 b(sequences)f(is)f(contrasted)f(in)h(Figure)f(1.)29
b(In)15 b(the)g(AM)g(imple-)-150 685 y(mentation,)i(shown)e(in)g(sub\256gure)
g(\(a\),)j(each)f(frame)g(contains)e(a)h(list)f(of)-150 735
y(ready)c(threads.)k(These)d(are)f(run)f(through)e(entirely)i(for)g(one)g
(frame)h(\(along)-150 785 y(with)f(any)h(threads)g(they)f(spawn\))h(and)g
(then)g(for)f(another)n(.)17 b(Arrivals)10 b(in)h(the)-150
835 y(message)g(queue)e(are)h(processed)f(immediately)m(,)h(interrupting)c
(thread)j(exe-)-150 884 y(cution.)14 b(In)9 b(the)h(MD)f(implementation,)g
(shown)g(in)g(sub\256gure)h(\(b\),)f(threads)-150 934 y(are)g(not)e(stored)h
(in)g(the)f(frames.)16 b(The)9 b(LCV)f(exclusively)g(contains)f(enabled)-150
984 y(threads.)15 b(Messages)9 b(in)f(the)g(queue)h(are)g(not)e(processed)i
(until)d(the)j(LCV)f(has)-150 1034 y(been)13 b(emptied.)23
b(Then,)15 b(the)d(\256rst)h(message)h(is)f(processed,)i(executing)d(an)-150
1084 y(inlet)f(that)h(pushes)g(any)h(threads)f(it)g(posts)f(on)h(the)g(LCV)-5
b(,)13 b(which)f(will)f(then)-150 1134 y(get)f(cleared)h(out)f(before)g(the)g
(next)g(message)i(is)e(processed.)-108 1183 y(While)d(both)g(impl)o
(ementations)f(yield)g(th)o(e)h(same)g(results,)f(their)h(dynamic)-150
1233 y(behaviors)i(dif)o(fer)n(.)15 b(If)9 b(two)h(inlet)e(messages)k(for)e
(the)f(same)j(frame)e(arrive)g(at)-150 1283 y(about)h(the)h(same)h(time,)f
(under)f(the)h(AM)f(implementation,)g(one)h(will)f(run,)-150
1333 y(then)h(the)g(other)n(,)h(followed)e(by)h(any)h(threads)f(they)g(fork.)
21 b(Under)12 b(the)g(MD)-150 1383 y(implementation,)c(the)g(\256rst)f(inlet)
g(will)g(run,)h(followed)f(by)h(any)g(threads)g(that)-150 1432
y(it)i(posts,)i(with)e(the)h(second)h(inlet)e(running)f(after)j(all)f(the)g
(enabled)g(threads)-150 1482 y(within)d(the)j(frame)g(complete.)-108
1532 y(The)f(MD)h(implementation)e(has)h(three)h(negative)f(consequences:)
-119 1611 y(1.)21 b(Since)d(inlets)e(are)j(not)d(executed)j(at)e(high)g
(priority)m(,)g(the)h(message)-67 1661 y(queue)11 b(has)f(a)h(greater)g
(likelihood)c(of)j(over\257owing.)-119 1742 y(2.)21 b(Due)d(to)e(the)i
(shorter)e(quanta,)k(entry)c(and)i(exit)e(threads)i(\(if)e(used\))-67
1792 y(would)9 b(run)h(more)h(often,)f(and)g(more)h(quanta)f(would)f(be)h
(started.)-119 1873 y(3.)21 b(The)9 b(shorter)f(quanta)h(prevent)f(the)g
(data)h(cache)h(bene\256ts)f(of)f(grouping)-67 1923 y(together)h(threads)i
(from)f(the)g(same)i(frame.)-108 2002 y(W)m(e)h(do)g(not)f(address)i(the)f
(\256rst)g(concern)g(in)g(this)f(paper)n(,)j(only)d(running)-150
2052 y(programs)d(that)f(\256t)h(in)f(the)h(message)i(queue.)k(W)m(e)9
b(veri\256ed)g(that)g(substantial)-150 2102 y(problems)d(could)g(be)g(solved)
g(without)g(using)g(all)g(the)g(memory)g(available)g(for)-150
2151 y(message)g(queues.)16 b(W)m(e)6 b(also)g(disregard)g(the)g(second)g
(issue,)k(since)c(entry)g(and)-150 2201 y(exit)k(threads)h(have)g(not)f(been)
h(and)g(are)g(not)f(planned)g(to)g(be)h(implemented.)-150 2251
y(Also,)j(starting)e(a)j(quantum)d(in)h(the)h(MD)f(approach)h(is)f(cheap,)j
(requiring)-150 2301 y(no)10 b(more)h(time)f(than)f(a)i(thread-to-thread)e
(control)g(transfer)n(.)15 b(W)m(e)10 b(focus)h(on)-150 2351
y(the)e(third)f(point:)k(how)d(the)g(cache)h(dif)o(ferences)g(and)f
(instruction)e(counts)i(of)-150 2401 y(the)i(two)g(systems)h(af)o(fect)h
(total)d(run)h(times,)i(to)d(understand)h(the)h(costs)f(and)-150
2450 y(bene\256ts)g(of)e(hardware-buf)o(fered)i(message)h(queues.)-108
2500 y(The)f(major)g(bene\256t)g(of)g(the)f(MD)h(implementation)f(is)h
(reduced)g(time)g(to)-150 2550 y(post)c(from)h(an)g(inlet,)g(enqueue)g(a)h
(frame)g(into)d(the)i(global)f(list,)h(and)g(begin)f(an)996
42 y(activation.)21 b(Nikhil)10 b(made)k(similar)e(observations)f
(independently)m(,)h(criti-)996 91 y(cizing)e(T)m(AM)h(for)g(its)f(atomicity)
g(problems,)i(frame)f(memory)h(traf)o(\256c,)g(and)996 141
y(scheduling)e(overhead,)j(which)e(he)h(found)e(to)h(be)h(of)f(greater)h
(signi\256cance)996 191 y(than)e(the)g(improvement)f(in)h(locality)f([Nik93)o
(].)1037 242 y(An)h(additional)e(bene\256t)h(of)h(the)f(MD)h(implementation)f
(is)g(that,)h(because)996 292 y(inlets)e(pass)i(control)f(directly)f(to)h
(threads)g(instead)h(of)f(placing)g(them)g(into)g(a)996 342
y(continuation)d(vector)n(,)j(a)g(bigger)f(region)f(of)h(code)h(is)g(open)f
(to)g(conventional)996 392 y(optimization.)k(For)d(example,)h(consider)e(the)
g(following)e(inlet)h(and)i(thread,)996 442 y(as)i(they)f(might)f(be)h
(implemented)h(on)e(the)i(J-Machine:)1062 519 y(Inlet)f(0:)1062
569 y(\(I1\))61 b(reg0)10 b Fb( )g Fn(message.ar)o(gument)1062
619 y(\(I2\))61 b(frame[5])10 b Fb( )g Fn(reg0)1062 669 y(\(I3\))61
b(post)9 b(thread)h(1)1062 719 y(Thread)h(1:)1062 769 y(\(T1\))50
b(reg0)10 b Fb( )g Fn(frame[5])1186 818 y(...)1062 868 y(\(Tn\))50
b(stop)996 945 y(If)12 b(thread)h(1)f(is)h(non-synchronizing)d(and)j(if)f
(only)g(inlet)f(0)i(posts)f(or)h(forks)996 995 y(thread)i(1,)h(the)f(reload)g
(of)f(the)h(register)g(in)f(line)g(T1)h(can)h(be)f(eliminated.)996
1045 y(Additionally)m(,)f(the)i(code)g(for)f(the)g(thread)g(can)i(be)e
(placed)h(immediately)996 1095 y(after)11 b(the)h(inlet,)e(eliminating)g(the)
h(need)h(for)f(line)g(I3.)18 b(If)11 b(no)g(other)g(threads)996
1144 y(use)17 b(frame)h(slot)f(5,)i(line)d(I2)h(can)h(be)f(removed.)36
b(Ordinarily)m(,)18 b(the)f(stop)996 1194 y(statement)12 b(in)g(line)g(Tn)g
(is)g(implemented)g(as)h(a)g(pop)f(of)g(the)g(LCV)g(into)f(the)996
1244 y(instruction)f(register)n(.)22 b(If)12 b(thread)g(1)h(contains)f(no)g
(pushes)h(onto)f(the)g(LCV)-5 b(,)996 1294 y(then)10 b(the)g(LCV)g(is)g
(known)g(to)f(be)i(empty)m(,)g(and)f(the)g(stop)g(can)h(be)f(converted)996
1344 y(to)f(a)i(suspend)f(instruction.)i(Even)f(if)e(only)g(some)i(of)f
(these)g(conditions)e(are)996 1393 y(met,)j(a)g(subset)f(of)g(these)g
(optimizations)f(can)i(be)f(performed.)996 1521 y Fe(2.4)50
b(Alternative)11 b(Implementations)996 1602 y Fn(W)m(e)g(discovered)f(an)h
(interesting)d(uniprocessor)i(anomaly)g(during)f(our)h(ex-)996
1652 y(periments.)15 b(Our)9 b(AM)g(implementation)f(only)h(brie\257y)g
(enables)h(interrupts)996 1702 y(at)k(the)g(top)f(of)h(each)h(thread.)26
b(Another)13 b(possibility)m(,)g(which)h(we)g(call)g(the)996
1751 y Fh(enabled)c Fn(implementation,)f(allows)h(interrupts)e(whenever)j
(possible)e(\(i.e.,)996 1801 y(except)j(during)d(CV)j(access\).)20
b(As)12 b(Figure)f(2)g(shows,)h(the)f(enabled)h(imple-)996
1851 y(mentation)h(allows)g(a)h(local)g(I-structure)e(fetch)i(to)f(be)h
(serviced)g(immedi-)996 1901 y(ately)m(,)9 b(resulting)d(in)i(greater)g
(quantum)f(size.)15 b(In)8 b(the)g(AM)g(implementation,)996
1951 y(the)j(I-structure)f(fetch)h(might)f(not)g(be)h(serviced)h(until)d
(after)i(the)g(quantum,)996 2000 y(decreasing)g(granularity)m(.)16
b(The)11 b(Berkeley)g(team)h(inlined)d(fetches)j(of)e(local)996
2050 y(I-structures,)h(so)h(this)f(ef)o(fect)h(was)h(not)e(a)h(direct)f
(concern.)20 b(While)12 b(perfor)o(-)996 2100 y(mance)f(of)f(the)g(enabled)g
(implementation)e(is)i(superior)f(to)g(that)h(of)f(the)h(AM)996
2150 y(implementation)e(on)h(a)g(single)g(processor)n(,)h(the)f(dif)o
(ference)h(between)g(these)996 2200 y(two)c(systems)i(is)f(negligible)e(when)
j(I-structure)e(accesses)k(are)e(remote.)14 b(The)996 2249
y(unenabled)f(AM)g(implementation)g(on)g(a)h(uniprocessor)n(,)g(which)f(we)h
(use,)996 2299 y(more)d(accurately)g(models)g(multiprocessor)f(behavior)g(of)
h(either)f(of)h(these)996 2349 y(systems)g(than)e(does)i(the)f(enabled)h
(implementation)d(on)i(a)h(uniprocessor)n(.)1037 2401 y(Another)i(variation)g
(is)g(to)g(combine)h(the)g(two)f(approaches,)i(using)e(the)996
2450 y(message-driven)7 b(approach)h(for)e(short)h(threads)g(and)g(the)g
(Active)g(Messages)996 2500 y(approach)k(for)g(long)f(threads,)h(as)h(is)f
(done)f(with)g(Optimistic)g(Active)h(Mes-)996 2550 y(sages)e([KWW)1216
2535 y Fi(+)1243 2550 y Fn(94].)14 b(In)8 b(this)e(study)m(,)i(however)n(,)i
(our)d(goal)g(is)h(to)f(understand)965 2675 y(4)p eop
%%Page: 5 5
4 bop -150 65 a Fl(Thread)25 b(A1)359 b(Thread)25 b(B1)-150
111 y(\(A1\))f(Enable)h(interrupt)q(s)70 b(\(B1\))24 b(Enable)h(interrup)q
(ts)-150 156 y(\(A2\))f(Disable)h(interrup)q(ts)48 b(\(B2\))24
b(Initiate)i(I-fetch)-150 202 y(\(A3\))e(Initiate)i(I-fetch)92
b(\(B3\))24 b(Disable)i(interrupt)q(s)-150 248 y(\(A4\))e(Pop)g(CV)314
b(\(B4\))24 b(Pop)g(CV)74 293 y(\(a\))517 b(\(b\))-150 426
y Fn(Figure)11 b(2:)16 b(In)11 b(sub\256gure)g(\(a\),)i(illustrating)8
b(the)j(ordinary)f(unenabled)h(AM)-150 476 y(implementation,)d(interrupts)e
(are)k(enabled)e(brie\257y)g(at)g(the)h(top)e(of)h(a)h(thread.)-150
526 y(The)h(I-fetch)f(is)g(not)f(serviced)h(during)f(the)h(lifetime)f(of)h
(the)g(thread.)15 b(In)9 b(sub-)-150 576 y(\256gure)k(\(b\),)g(illustrating)d
(the)j(enabled)g(AM)g(implementation,)f(interrupts)-150 625
y(are)g(only)e(disabled)h(for)g(CV)g(access.)20 b(If)11 b(the)g(I-structure)f
(fetch)h(is)h(local,)f(it)-150 675 y(will)c(occur)i(between)g(steps)g(B2)f
(and)g(B3)g(in)g(the)h(enabled)f(implementation,)-150 725 y(followed)g(by)h
(the)g(inlet)f(to)g(receive)i(the)g(data,)g(allowing)d(another)i(thread)g(to)
-150 775 y(be)i(placed)f(on)g(the)g(CV)-5 b(,)10 b(extending)f(the)i
(quantum.)-150 916 y(the)f(dif)o(ferences)h(in)f(behavior)f(of)h(the)g(two)g
(pure)g(systems.)-150 1078 y Fj(3)58 b(Analysis)-150 1179 y
Fn(In)17 b(this)g(section,)i(we)f(compare)g(the)g(code)f(produced)g(by)h(the)
f(two)g(im-)-150 1228 y(plementations,)d(including)d(relative)i(numbers)g(of)
h(data)f(and)h(instruction)-150 1278 y(accesses)19 b(and)d(cache)h
(performance.)33 b(Although)14 b(several)i(512-node)f(J-)-150
1328 y(Machines)9 b(are)h(operational,)e(an)h(instruction)d(simulator)i(was)h
(used)g(to)f(pro-)-150 1378 y(duce)15 b(more)h(detailed)e(statistics,)h
(speci\256cally)h(on)e(memory)h(access)i(and)-150 1428 y(granularity)m(.)25
b(Our)13 b(systems)i(can)f(run)f(on)h(multiple)e(processors,)k(but)d(we)-150
1478 y(examine)e(uniprocessor)f(results)f(almost)h(exclusively)m(,)h
(factoring)e(out)g(one)-150 1527 y(uniprocessor)f(anomaly)g(to)g(better)g
(predict)f(multiprocessor)g(performance)-150 1577 y(\(Section)j(2.4\).)-108
1631 y(The)c(programs)g(used)g(in)g(the)g(analysis)g(and)g(their)g(ar)o
(guments)g(are:)14 b Fh(matrix)-150 1681 y(multiply)5 b Fn(\(MMT\))i(50,)h
(which)f(multiplies)e(two)i(matrices)g(of)g(\257oating-point)-150
1731 y(numbers)h(and)h(sums)g(the)f(elements)h(of)f(the)g(product;)g
Fh(quicksort)g Fn(\(QS\))h(100,)-150 1780 y(which)f(sorts)g(an)h(array)g(of)f
(random)g(integers;)h Fh(discr)n(ete)g(time)f(warp)g Fn(\(DTW\))-150
1830 y(10,)18 b(a)f(speech-processing)g(application)f(that)g(performs)g
(operations)g(on)-150 1880 y(matrices)9 b(of)f(\257oating-point)d(numbers;)j
Fh(paraf\256ns)f Fn(13,)i(which)e(enumerates)-150 1930 y(the)16
b(distinct)f(isomers)h(of)g(paraf)o(\256ns)h([AHN88)o(];)h
Fh(wavefr)n(ont)e Fn(40,)i(which)-150 1980 y(computes)10 b(successive)i
(matrices)f(in)e(which)h(each)h(element)g(depends)f(on)g(a)-150
2030 y(function)d(of)g(north)f(and)h(west)g(values)g(of)g(t)o(he)g(previ)o
(ous)g(and)g(current)f(matrix;)-150 2079 y(and)14 b Fh(selection)f(sort)h
Fn(\(SS\))g(100,)g(which)f(sorts)g(an)h(array)g(of)g(integers)f(that)-150
2129 y(are)h(originally)c(in)i(reverse)i(order)n(.)22 b(Run)12
b(length)g(ranged)g(from)h(hundreds)-150 2179 y(of)d(thousands)f(to)h(tens)g
(of)g(millions)f(of)h(machine)h(instructions.)-150 2320 y Fe(3.1)50
b(Counts)12 b(of)g(instructions)f(and)h(memory)h(accesses)-150
2405 y Fn(The)i(primary)f(data)g(access)j(bene\256ts)d(of)g(the)g(MD)g
(implementation,)h(ac-)-150 2455 y(crued)c(through)d(the)i(J-Machine)h
(message)h(queue,)f(are:)-108 2550 y Fb(\017)20 b Fn(eliminating)9
b(the)h(remote)g(continuation)e(vector)i(and)1037 42 y Fb(\017)21
b Fn(directly)16 b(accessing)j(data)f(from)g(the)g(message)h(queue)f(instead)
f(of)1079 91 y(storing)8 b(it)i(in)g(the)g(frame.)1037 192
y(The)k(main)f(instruction)d(count)i(bene\256ts)h(of)g(the)g(MD)f
(implementation)996 242 y(are:)1037 342 y Fb(\017)21 b Fn(eliminating)14
b(the)i(calls)h(to)e(library)g(routines)h(to)f(post)h(threads)g(and)1079
392 y(manage)11 b(the)f(queue)h(of)f(inactive)g(frames,)1037
498 y Fb(\017)21 b Fn(eliminating)6 b(data)i(stores/loads)g(due)g(to)f(the)h
(control)f(locality)f(of)i(inlet)1079 548 y(and)i(thread)g(execution,)g(and)
1037 654 y Fb(\017)21 b Fn(eliminating)8 b(pops)i(of)g(the)g(empty)g(CV)-5
b(.)1037 755 y(For)10 b(analysis,)h(memory)f(was)h(divided)e(into)f(system)j
(and)f(user)g(regions.)996 805 y(System)j(code)h(includes)f(the)g(operating)f
(system)i(and)f(library)m(,)g(including)996 855 y(the)e(\257oating-point)d
(library)m(.)18 b(System)12 b(data)f(structures)g(are)h(comprised)f(of)996
904 y(the)j(incoming)f(message)j(queues,)g(operating)d(system)i(globals,)g
(and)f(the)996 954 y(LCV.)21 b(User)13 b(code)g(consists)f(of)g(the)g
(threads)h(and)f(inlets)g(unique)f(to)h(each)996 1004 y(program.)22
b(On)12 b(average,)j(the)d(MD)h(implementation)e(yields)h(86\045)g(of)g(the)
996 1054 y(reads,)h(87\045)f(of)f(the)h(writes,)h(and)f(77\045)f(of)h(the)g
(fetches)h(produced)f(by)f(the)996 1104 y(AM)f(implementation.)1037
1159 y(In)k(the)h(remainder)g(of)f(this)f(section,)j(we)f(quantitatively)d
(analyze)j(the)996 1209 y(dif)o(ferences)e(in)g(dynamic)g(behavior)f(in)g
(the)h(code)g(produced)g(by)f(the)h(two)996 1259 y(implementations.)g(W)m(e)7
b(now)g(take)g(into)g(account)g(t)o(he)g(di)o(f)o(ferences)g(in)g(cache)996
1309 y(performance,)k(showing)e(the)h(net)g(ef)o(fect)h(of)f(the)g(trade-of)o
(fs)g(in)f(instruction)996 1358 y(counts)h(and)g(locality)m(.)996
1509 y Fe(3.2)50 b(Measur)o(es)13 b(of)f(Granularity)996 1598
y Fn(A)h(useful)f(metric)h(of)g(granularity)e(is)i Fh(thr)n(eads)g(per)h
(quantum)d Fn([CSS)2007 1583 y Fi(+)2034 1598 y Fn(91],)996
1648 y(which)6 b(indicates)h(how)g(many)g(threads)g(from)g(a)h(frame)f(are)h
(executed)g(before)996 1697 y(a)15 b(switch)g(to)g(another)f(frame.)31
b(This)15 b(can)h(involve)e(emptying)g(the)h(LCV)996 1747 y(multiple)e(times)
i(if)g(subsequent)f(messages)j(are)f(destined)e(for)h(the)g(same)996
1797 y(frame.)28 b(As)14 b(we)h(will)e(show)m(,)i(threads)g(per)f(quantum)f
(\(TPQ\))i(is)f(a)h(useful)996 1847 y(predictor)f(of)g(the)h(relative)g
(performance)h(of)e(programs)h(under)g(the)g(two)996 1897 y(systems.)1037
1952 y(T)m(able)f(2)f(shows)f(the)h(average)h(number)f(of)g(threads)g(per)g
(quantum,)g(in-)996 2002 y(structions)d(per)h(quantum,)g(and)h(instructions)d
(per)i(thread)g(for)g(all)g(the)g(pro-)996 2052 y(grams)16
b(running)d(on)i(a)h(single)f(processor)g(for)g(each)i(system.)31
b(\(The)15 b(last)996 2102 y(set)d(of)g(columns)g(will)f(be)i(discussed)f
(later)n(.\))21 b(As)12 b(expected,)i(the)e(AM)g(im-)996 2151
y(plementation)i(has)h(higher)g(numbers)g(of)g(instructions)e(and)i(threads)g
(per)996 2201 y(quantum,)8 b(almost)g(without)f(exception.)14
b(Quanta)8 b(were)h(particularly)e(lar)o(ge)996 2251 y(for)i(wavefront)g(and)
h(selection-sort,)g(the)f(latter)h(in)f(part)g(because)j(it)d(makes)996
2301 y(only)k(3)g(procedure)h(calls)h(in)e(its)g(entire)h(execution,)g
(leading)g(to)f(high)g(lo-)996 2351 y(cality)h(for)f(frame)j(memory)m(.)28
b(W)n(ith)14 b(the)g(exception)g(of)g(matrix)g(multiply)996
2401 y(\(MMT\),)d(whose)h(average)g(number)f(of)g(instructions)f(per)h
(thread)g(\(IPT\))g(is)996 2450 y(much)c(lar)o(ger)g(than)g(any)g(other)g
(program,)e(instructions)i(per)g(quantu)o(m)g(\(IPQ\))996 2500
y(increases)12 b(as)g(TPQ)g(increases.)20 b(W)m(e)11 b(now)g(examine)h(the)f
(cache)i(ef)o(fects)f(of)996 2550 y(these)e(dif)o(ferences)h(in)f
(granularity)m(.)965 2675 y(5)p eop
%%Page: 6 6
5 bop 260 43 1430 2 v 259 93 2 50 v 285 78 a Fn(Program)p 483
93 V 150 w(TPQ)p 749 93 V 185 w(IPT)p 994 93 V 222 w(IPQ)p
1322 93 V 242 w(MD/AM)p 1689 93 V 259 143 V 483 143 V 517 128
a(MD)66 b(AM)p 749 143 V 61 w(MD)55 b(AM)p 994 143 V 71 w(MD)97
b(AM)p 1322 143 V 94 w(12)81 b(24)f(48)p 1689 143 V 260 144
1430 2 v 259 194 2 50 v 285 179 a(MMT)p 483 194 V 141 w(4.2)g(4.2)p
749 194 V 81 w(84)h(90)p 994 194 V 85 w(349)101 b(373)p 1322
194 V 80 w(1.03)50 b(1.20)f(1.54)p 1689 194 V 259 244 V 285
229 a(QS)p 483 244 V 187 w(4.5)80 b(5.7)p 749 244 V 66 w(16.7)49
b(20.8)p 994 244 V 81 w(76)112 b(1)n(19)p 1322 244 V 92 w(.98)60
b(1.13)49 b(1.38)p 1689 244 V 259 294 V 285 279 a(DTW)p 483
294 V 146 w(5.3)80 b(6.0)p 749 294 V 66 w(22.6)49 b(26.5)p
994 294 V 71 w(1)n(19)102 b(159)p 1322 294 V 91 w(.97)60 b(1.12)49
b(1.39)p 1689 294 V 259 344 V 285 329 a(Paraf)o(\256ns)p 483
344 V 94 w(6.8)80 b(8.7)p 749 344 V 66 w(23.8)49 b(29.2)p 994
344 V 70 w(161)101 b(253)p 1322 344 V 91 w(.87)70 b(.92)h(.99)p
1689 344 V 259 394 V 285 379 a(W)m(avefront)p 483 394 V 54
w(43.9)60 b(65.2)p 749 394 V 55 w(50.7)49 b(54.0)p 994 394
V 60 w(2223)80 b(3520)p 1322 394 V 80 w(.87)70 b(.86)h(.87)p
1689 394 V 259 443 V 285 428 a(SS)p 483 443 V 178 w(6432)49
b(6892)p 749 443 V 49 w(13.1)g(18.3)p 994 443 V 50 w(83961)f(126104)p
1322 443 V 59 w(.61)70 b(.61)h(.62)p 1689 443 V 260 445 1430
2 v -150 519 a(T)m(able)9 b(2:)14 b(A)8 b(comparison)h(of)f(threads)g(per)h
(quantum)f(\(TPQ\),)h(instructions)d(per)j(thread)f(\(IPT\),)h(and)g
(instructions)d(per)j(quantum)e(\(IPQ\))i(for)f(the)g(Message-)-150
569 y(Driven)h(\(MD\))h(and)g(Active)f(Messages)j(\(AM\))d(implementations.)
14 b(The)d(last)f(columns)f(show)h(the)g(ratios)f(of)h(the)f(cycles)i(taken)f
(under)g(the)f(MD)h(and)g(AM)-150 618 y(implementations)f(in)h(8192-byte)f
(4-way)h(set-associative)g(caches)i(with)d(varying)h(miss)g(costs.)16
b(The)11 b(programs)f(are)h(or)o(ganized)f(so)g(that)g(TPQ)h(increases)-150
668 y(and)f(cycle)h(ratios)f(generally)g(decrease.)-150 802
y Fe(3.3)50 b(Performance)13 b(including)e(cache)h(effects)-150
886 y Fn(W)m(e)6 b(fed)g(instructions)g(and)g(traces)g(generated)g(by)g(the)g
(instruction)g(simulator)-150 936 y(into)g(a)h(cache)i(simulator)n(.)k(In)6
b(all)h(cases,)i(we)f(speci\256ed)g(separate)g(instruction)-150
985 y(and)j(write-back)f(data)h(caches)i(with)d(replacement)i(of)e(the)h
(least-recently-)-150 1035 y(used)d(element.)15 b(W)m(e)7 b(simulated)g(1-,)h
(2-,)h(and)e(4-way)g(set-associativity)f(with)-150 1085 y(block)11
b(sizes)h(varying)e(from)h(8)h(to)f(64)g(bytes.)18 b(W)m(e)12
b(show)f(data)h(for)e(64-byte)-150 1135 y(blocks,)f(the)g(size)h(at)f(which)f
(both)g(systems)h(performed)g(best.)15 b(Instructions)-150
1185 y(were)f(assumed)g(to)e(uniformly)f(take)j(one)f(cycle,)h(not)f
(counting)e(memory)-150 1234 y(access)j(time.)19 b(Because)13
b(the)e(number)h(of)f(data)h(and)f(code)i(accesses)h(dif)o(fer)-150
1284 y(between)d(the)f(two)g(implementations,)g(the)g(absolute)g(numbers)h
(of)f(cycles,)-150 1334 y(not)i(miss)h(percentages,)h(are)f(compared.)23
b(Throughout)11 b(this)h(section,)h(we)-150 1384 y(use)18 b(as)f(a)h(metric)g
(the)f(ratio)f(of)h(the)g(number)g(of)g(total)f(cycles)i(\(includ-)-150
1434 y(ing)13 b(miss)h(penalties\))g(of)f(the)h(MD)g(implementation)e(to)i
(that)f(of)h(the)f(AM)-150 1484 y(implementation.)-108 1537
y(Figure)c(3)g(shows)h(the)f(ratios)g(of)h(the)f(geometric)h(means)h(of)e
(the)h(test)f(pro-)-150 1587 y(grams,)i(with)d(varying)h(cache)i(sizes)f(and)
g(miss)g(penalties.)15 b(For)9 b(all)g(caches,)-150 1636 y(the)f(MD)f
(implementation)g(outperforms)g(the)g(AM)h(implementation)e(when)-150
1686 y(the)11 b(miss)h(cost)g(is)f(12)g(or)g(24)g(cycles)i(or)e(the)g(cache)i
(is)f(lar)o(ge.)19 b(\(This)11 b(is)h(true)-150 1736 y(of)g(the)h(geometric)g
(mean)g(but)f(not)g(of)g(all)h(the)f(test)h(programs,)g(as)h(will)d(be)-150
1786 y(discussed)i(later)n(.\))21 b(When)12 b(the)h(miss)f(cost)h(is)f(48)g
(cycles,)i(the)e(MD)h(imple-)-150 1836 y(mentation)d(outperforms)f(the)h(AM)h
(implementation)e(if)h(a)g(direct-mapped)-150 1885 y(cache)19
b(is)f(used,)i(and)e(there)f(is)h(no)f(clear)i(winner)e(with)f(2-)i(and)g
(4-way)-150 1935 y(set-associative)10 b(caches.)-108 1988 y(There)18
b(is)g(little)e(dif)o(ference)j(between)f(the)g(ratios)f(of)h(the)f
(geometric)-150 2038 y(means)i(for)d(2-)h(and)h(4-way)f(set-associative)h
(caches,)j(but)16 b(there)i(is)f(for)-150 2088 y(direct-mapped)g(caches.)39
b(In)17 b(the)g(next)g(sections,)j(we)e(will)e(separately)-150
2138 y(discuss)10 b(the)f(behavior)g(with)g(4-way)h(set-associative)g(and)f
(direct-mapped)-150 2188 y(caches.)-150 2316 y Fd(3.3.1)42
b(4-way)9 b(set-associative)h(caches)-108 2401 y Fn(The)j(ratio)f(of)g(total)
g(cycles)i(used)e(in)h(the)f(MD)h(to)f(the)h(AM)f(implemen-)-150
2450 y(tation)j(is)g(lowest)h(with)e(small)i(and)g(lar)o(ge)g(caches,)k(as)c
(was)h(the)f(case)h(in)-150 2500 y(Figure)9 b(3.)15 b(W)n(ith)9
b(small)h(caches,)i(both)d(systems)h(have)g(high)f(miss)h(rates,)g(so)-150
2550 y(the)i(number)h(of)f(memory)h(accesses)i(is)d(the)h(primary)f(factor)n
(.)21 b(W)n(ith)12 b(lar)o(ge)996 802 y(caches,)f(there)f(are)g(few)g
(misses,)h(so)e(after)h(compulsory)e(misses)i(are)h(taken,)996
851 y(the)k(number)h(of)f(memory)h(accesses)i(again)e(dominates.)31
b(As)16 b(the)f(T)m(AM)996 901 y(model)9 b(predicts,)h(the)f(two-level)f
(scheduling)h(strategy)g(yields)g(fewer)h(data)996 951 y(cache)i(misses)g(on)
e(medium-sized)i(caches.)18 b(This)11 b(is)g(an)g(important)f(cache)996
1001 y(size)h(range)f(to)g(consider)n(,)h(since)g(relative)e(cache)j
(performance)g(is)e(less)g(im-)996 1051 y(portant)d(at)i(the)g(extremes,)i
(when)e(the)g(working)e(set)i(\256ts)g(either)g(completely)996
1101 y(or)h(not)f(at)h(all)g(in)g(the)g(cache.)1037 1152 y(While)h(most)f
(programs)h(run)f(more)h(quickly)f(in)g(the)g(AM)h(than)g(the)f(MD)996
1202 y(implementation)h(for)h(the)h(lar)o(gest)g(miss)g(penalty)f
(considered,)h(as)h(shown)996 1252 y(in)e(Sub\256gure)h(4\(c\),)g(three)g(of)
g(the)g(programs)g(\(selection-sort,)f(paraf)o(\256ns,)996
1302 y(and)i(wavefront\))g(still)f(perform)h(best)g(under)g(the)h(MD)f
(implementation.)996 1352 y(Conversely)m(,)9 b(for)g(the)h(smallest)f(miss)h
(penalty)m(,)g(shown)f(in)g(Sub\256gure)g(4\(a\),)996 1401
y(the)k(AM)h(implementation)e(outperforms)h(the)h(MD)f(implementation)g(for)
996 1451 y(one)7 b(program)g(\(matrix-multiply\))t(and)g(does)h(about)e(as)i
(well)f(on)g(two)g(others)996 1501 y(\(dtw)f(and)h(quicksort\).)13
b(This)7 b(behavior)g(can)h(be)f(understood)f(by)h(examining)996
1551 y(the)g(granularities)f(of)h(each)i(of)e(the)g(programs.)14
b(T)m(able)8 b(2)g(shows)f(the)g(relation)996 1601 y(between)12
b(threads)g(and)g(instructions)e(per)i(quantum)g(and)g(the)g(cycle)h(ratio.)
996 1650 y(As)8 b(threads)g(per)f(quantum)h(increases,)h(the)f(cycle)h(ratio)
e(decreases;)j(i.e.,)f(the)996 1700 y(more)k(work)g(in)f(each)i(quantum,)g
(the)e(better)h(the)g(MD)g(implementation')n(s)996 1750 y(relative)8
b(performance.)16 b(Thus,)9 b(the)f(MD)h(implementation)e(is)i(better)f(when)
996 1800 y(locality)k(is)g(easier)i(to)f(\256nd,)h(and)f(the)g(AM)g
(implementation)f(is)h(better)f(on)996 1850 y(\256ner)o(-grained)e(programs)g
(where)h(there)f(is)g(little)f(locality)g(to)g(exploit.)996
1970 y Fd(3.3.2)41 b(Dir)o(ect-mapped)11 b(caches)996 2052
y Fn(While)i(4-way)h(set-associative)g(caches)h(yielded)e(the)h(best)f
(performance)996 2102 y(for)c(both)g(systems,)i(we)g(also)f(examined)h
(direct-mapped)f(caches)i(because)996 2151 y(they)d(are)i(easier)f(to)g
(build)e(and)i(have)g(lower)f(latency)m(.)16 b(Figure)9 b(5)h(shows)f(the)996
2201 y(relative)f(performance)h(of)g(each)g(program)g(and)f(their)g
(geometric)h(mean)h(for)996 2251 y(miss)g(costs)g(of)f(12,)h(24,)g(and)g(48)f
(cycles.)16 b(The)11 b(order)e(of)h(the)f(ratios)g(is)h(again)996
2301 y(closely)i(related)h(to)g(the)g(relative)f(threads)h(per)g(quantum.)23
b(These)14 b(graphs)996 2351 y(exhibit)f(more)i(\252noise\272)g(due)f(to)g
(the)g(con\257icts)h(characteristic)f(of)h(direct-)996 2401
y(mapped)10 b(caches,)h(so)f(the)f(geometric)h(mean)g(shows)g(more)g
(regularity)e(than)996 2450 y(any)17 b(of)g(the)g(individual)e(programs.)36
b(While)17 b(the)g(curves)h(representing)996 2500 y(the)f(geometric)h(mean)g
(average)h(out)e(the)g(noise)g(and)h(are)g(qualitatively)996
2550 y(similar)d(among)h(the)g(three)g(graphs,)i(the)e(shape)h(is)f(dif)o
(ferent)f(from)h(that)965 2675 y(6)p eop
%%Page: 7 7
6 bop -140 1048 a @beginspecial -50 @llx -60 @lly 504 @urx
740 @ury 1570 @rwi @setspecial
%%BeginDocument: geo124-12.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 504 740
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72 193.863 S9
[] 1.000000 SL
132.456 288.613 M9
192.912 305.223 M9
253.368 266.831 M9
313.824 195.321 M9
374.28 151.165 M9
434.736 144.338 M9
495.192 141.82 M9
D9
72 200.75 S9
132.456 264.831 M9
192.912 279.666 M9
253.368 266.547 M9
313.824 206.509 M9
374.28 166.302 M9
434.736 150.126 M9
495.192 148.225 M9
D9
72 182.595 S9
132.456 211.501 M9
192.912 193.55 M9
253.368 185.905 M9
313.824 128.17 M9
374.28 170.515 M9
434.736 192.852 M9
495.192 154.992 M9
D9
initclip 
30 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 132.456 72 TXC
(|) 0 192.912 72 TXC
(|) 0 253.368 72 TXC
(|) 0 313.824 72 TXC
(|) 0 374.28 72 TXC
(|) 0 434.736 72 TXC
(|) 0 495.192 72 TXC
(|) -90 72 72 TXC
(0.75) 0 57 63 TXR
(|) -90 72 151.024 TXC
(0.80) 0 57 142.024 TXR
(|) -90 72 230.049 TXC
(0.85) 0 57 221.049 TXR
(|) -90 72 309.073 TXC
(0.90) 0 57 300.073 TXR
(|) -90 72 388.098 TXC
(0.95) 0 57 379.098 TXR
(|) -90 72 467.122 TXC
(1.00) 0 57 458.122 TXR
(|) -90 72 546.146 TXC
(1.05) 0 57 537.146 TXR
(|) -90 72 625.171 TXC
(1.10) 0 57 616.171 TXR
(|) -90 72 704.195 TXC
(1.15) 0 57 695.195 TXR
( (a) Hit = 1 cycle, miss = 12 cycles) 0 288 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 504 72 
L9
0 setlinecap
72 72 72 720 
L9
() 0 504 9.5 TXR
( Ratio (MD/AM)) 90 -19.5 720 TXR
(1K) 0 55.7566 24.5854 TXL
(2K) 0 116.213 -7.02439 TXL
(4K) 0 179.197 24.5854 TXL
(8K) 0 240.89 -7.02439 TXL
(16K) 0 296.937 24.5854 TXL
(32K) 0 354.101 -7.02439 TXL
(64K) 0 414.557 24.5854 TXL
(128K) 0 476.675 -7.02439 TXL
() 0 55.7566 -6.91463 TXL
() 0 116.213 -38.5244 TXL
() 0 179.197 -6.91463 TXL
() 0 240.89 -38.5244 TXL
() 0 296.937 -6.91463 TXL
() 0 354.101 -38.5244 TXL
() 0 414.557 -6.91463 TXL
() 0 476.675 -38.5244 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<06> 72 193.863 SY
<06> 132.456 288.613 SY
<06> 192.912 305.223 SY
<06> 253.368 266.831 SY
<06> 313.824 195.321 SY
<06> 374.28 151.165 SY
<06> 434.736 144.338 SY
<06> 495.192 141.82 SY
<02> 72 200.75 SY
<02> 132.456 264.831 SY
<02> 192.912 279.666 SY
<02> 253.368 266.547 SY
<02> 313.824 206.509 SY
<02> 374.28 166.302 SY
<02> 434.736 150.126 SY
<02> 495.192 148.225 SY
<0a> 72 182.595 SY
<0a> 132.456 211.501 SY
<0a> 192.912 193.55 SY
<0a> 253.368 185.905 SY
<0a> 313.824 128.17 SY
<0a> 374.28 170.515 SY
<0a> 434.736 192.852 SY
<0a> 495.192 154.992 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial 676 w @beginspecial -50 @llx -60 @lly 504 @urx
740 @ury 1570 @rwi @setspecial
%%BeginDocument: geo124-24.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 504 740
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72 214.244 S9
[] 1.000000 SL
132.456 388.098 M9
192.912 451.317 M9
253.368 388.098 M9
313.824 245.854 M9
374.28 166.829 M9
434.736 151.024 M9
495.192 151.024 M9
D9
72 228.183 S9
132.456 329.29 M9
192.912 385.529 M9
253.368 385.895 M9
313.824 275.643 M9
374.28 196.421 M9
434.736 163.938 M9
495.192 160.128 M9
D9
72 198.439 S9
132.456 230.049 M9
192.912 214.244 M9
253.368 214.244 M9
313.824 119.415 M9
374.28 198.439 M9
434.736 245.854 M9
495.192 166.829 M9
D9
initclip 
30 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 132.456 72 TXC
(|) 0 192.912 72 TXC
(|) 0 253.368 72 TXC
(|) 0 313.824 72 TXC
(|) 0 374.28 72 TXC
(|) 0 434.736 72 TXC
(|) 0 495.192 72 TXC
(|) -90 72 72 TXC
(0.75) 0 57 63 TXR
(|) -90 72 151.024 TXC
(0.80) 0 57 142.024 TXR
(|) -90 72 230.049 TXC
(0.85) 0 57 221.049 TXR
(|) -90 72 309.073 TXC
(0.90) 0 57 300.073 TXR
(|) -90 72 388.098 TXC
(0.95) 0 57 379.098 TXR
(|) -90 72 467.122 TXC
(1.00) 0 57 458.122 TXR
(|) -90 72 546.146 TXC
(1.05) 0 57 537.146 TXR
(|) -90 72 625.171 TXC
(1.10) 0 57 616.171 TXR
(|) -90 72 704.195 TXC
(1.15) 0 57 695.195 TXR
( (b) Hit = 1 cycle, miss = 24 cycles) 0 288 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 504 72 
L9
0 setlinecap
72 72 72 720 
L9
() 0 504 9.5 TXR
() 90 -19.5 720 TXR
(1K) 0 55.7566 24.5854 TXL
(2K) 0 116.213 -7.02439 TXL
(4K) 0 179.197 24.5854 TXL
(8K) 0 240.89 -7.02439 TXL
(16K) 0 296.937 24.5854 TXL
(32K) 0 354.101 -7.02439 TXL
(64K) 0 414.557 24.5854 TXL
(128K) 0 476.675 -7.02439 TXL
() 0 55.7566 -6.91463 TXL
() 0 116.213 -38.5244 TXL
() 0 179.197 -6.91463 TXL
() 0 240.89 -38.5244 TXL
() 0 296.937 -6.91463 TXL
() 0 354.101 -38.5244 TXL
() 0 414.557 -6.91463 TXL
() 0 476.675 -38.5244 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<06> 72 214.244 SY
<06> 132.456 388.098 SY
<06> 192.912 451.317 SY
<06> 253.368 388.098 SY
<06> 313.824 245.854 SY
<06> 374.28 166.829 SY
<06> 434.736 151.024 SY
<06> 495.192 151.024 SY
<02> 72 228.183 SY
<02> 132.456 329.29 SY
<02> 192.912 385.529 SY
<02> 253.368 385.895 SY
<02> 313.824 275.643 SY
<02> 374.28 196.421 SY
<02> 434.736 163.938 SY
<02> 495.192 160.128 SY
<0a> 72 198.439 SY
<0a> 132.456 230.049 SY
<0a> 192.912 214.244 SY
<0a> 253.368 214.244 SY
<0a> 313.824 119.415 SY
<0a> 374.28 198.439 SY
<0a> 434.736 245.854 SY
<0a> 495.192 166.829 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial 675 w @beginspecial -50 @llx -60 @lly 504 @urx
740 @ury 1570 @rwi @setspecial
%%BeginDocument: geo124-48.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 504 740
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
18 SetSym
<06> 350.68 688.39 SY
30 /Helvetica-Bold SetTxt
( 4-way) 0 374.184 679.39 TXL
18 SetSym
<02> 350.68 649.39 SY
30 /Helvetica-Bold SetTxt
( 2-way) 0 374.184 640.39 TXL
18 SetSym
<0a> 350.68 610.39 SY
30 /Helvetica-Bold SetTxt
( 1-way) 0 374.184 601.39 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72 214.244 S9
[] 1.000000 SL
132.456 498.732 M9
192.912 672.585 M9
253.368 593.561 M9
313.824 356.488 M9
374.28 198.439 M9
434.736 166.829 M9
495.192 151.024 M9
D9
72 250.924 S9
132.456 385.296 M9
192.912 517.899 M9
253.368 577.597 M9
313.824 397.158 M9
374.28 251.558 M9
434.736 190.004 M9
495.192 182.827 M9
D9
72 198.439 S9
132.456 261.659 M9
192.912 245.854 M9
253.368 261.659 M9
313.824 119.415 M9
374.28 245.854 M9
434.736 340.683 M9
495.192 214.244 M9
D9
initclip 
(|) 0 72 72 TXC
(|) 0 132.456 72 TXC
(|) 0 192.912 72 TXC
(|) 0 253.368 72 TXC
(|) 0 313.824 72 TXC
(|) 0 374.28 72 TXC
(|) 0 434.736 72 TXC
(|) 0 495.192 72 TXC
(|) -90 72 72 TXC
(0.75) 0 57 63 TXR
(|) -90 72 151.024 TXC
(0.80) 0 57 142.024 TXR
(|) -90 72 230.049 TXC
(0.85) 0 57 221.049 TXR
(|) -90 72 309.073 TXC
(0.90) 0 57 300.073 TXR
(|) -90 72 388.098 TXC
(0.95) 0 57 379.098 TXR
(|) -90 72 467.122 TXC
(1.00) 0 57 458.122 TXR
(|) -90 72 546.146 TXC
(1.05) 0 57 537.146 TXR
(|) -90 72 625.171 TXC
(1.10) 0 57 616.171 TXR
(|) -90 72 704.195 TXC
(1.15) 0 57 695.195 TXR
( (c) Hit = 1 cycle, miss = 48 cycles) 0 288 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 504 72 
L9
0 setlinecap
72 72 72 720 
L9
() 0 504 9.5 TXR
() 90 -19.5 720 TXR
(1K) 0 55.7566 24.5854 TXL
(2K) 0 116.213 -7.02439 TXL
(4K) 0 179.197 24.5854 TXL
(8K) 0 240.89 -7.02439 TXL
(16K) 0 296.937 24.5854 TXL
(32K) 0 354.101 -7.02439 TXL
(64K) 0 414.557 24.5854 TXL
(128K) 0 476.675 -7.02439 TXL
() 0 55.7566 -6.91463 TXL
() 0 116.213 -38.5244 TXL
() 0 179.197 -6.91463 TXL
() 0 240.89 -38.5244 TXL
() 0 296.937 -6.91463 TXL
() 0 354.101 -38.5244 TXL
() 0 414.557 -6.91463 TXL
() 0 476.675 -38.5244 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<06> 72 214.244 SY
<06> 132.456 498.732 SY
<06> 192.912 672.585 SY
<06> 253.368 593.561 SY
<06> 313.824 356.488 SY
<06> 374.28 198.439 SY
<06> 434.736 166.829 SY
<06> 495.192 151.024 SY
<02> 72 250.924 SY
<02> 132.456 385.296 SY
<02> 192.912 517.899 SY
<02> 253.368 577.597 SY
<02> 313.824 397.158 SY
<02> 374.28 251.558 SY
<02> 434.736 190.004 SY
<02> 495.192 182.827 SY
<0a> 72 198.439 SY
<0a> 132.456 261.659 SY
<0a> 192.912 245.854 SY
<0a> 253.368 261.659 SY
<0a> 313.824 119.415 SY
<0a> 374.28 245.854 SY
<0a> 434.736 340.683 SY
<0a> 495.192 214.244 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial -150 1139 a Fn(Figure)12 b(3:)18 b(The)13 b(geometric)g(means)g
(of)f(the)g(ratios)g(of)g(the)g(total)f(time)i(taken)f(for)g(the)g(set)h(of)f
(test)g(programs)g(in)g(the)g(MD)g(to)g(the)g(AM)g(implementation)-150
1189 y(given)e(separate)h(data)g(and)f(instruction)e(caches.)17
b(The)11 b(miss)f(penalties)g(are)h(12,)g(24,)f(and)g(48,)g(respectively)m(,)
h(in)f(the)g(three)g(graphs.)-142 2247 y @beginspecial -50
@llx -60 @lly 612 @urx 668 @ury 1767 @rwi @setspecial
%%BeginDocument: summary12.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 612 668
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72 338.579 S9
[] 1.000000 SL
147.57 371.901 M9
223.14 386.182 M9
298.71 371.901 M9
374.28 343.339 M9
449.85 295.736 M9
525.42 290.975 M9
600.99 290.975 M9
D9
72 319.537 S9
147.57 357.62 M9
223.14 367.14 M9
298.71 343.339 M9
374.28 290.975 M9
449.85 276.694 M9
525.42 276.694 M9
600.99 276.694 M9
D9
72 324.298 S9
147.57 348.099 M9
223.14 367.14 M9
298.71 348.099 M9
374.28 305.256 M9
449.85 290.975 M9
525.42 286.215 M9
600.99 281.455 M9
D9
72 276.694 S9
147.57 305.256 M9
223.14 310.017 M9
298.71 295.736 M9
374.28 276.694 M9
449.85 262.413 M9
525.42 262.413 M9
600.99 257.653 M9
D9
72 300.496 S9
147.57 300.496 M9
223.14 300.496 M9
298.71 286.215 M9
374.28 286.215 M9
449.85 286.215 M9
525.42 286.215 M9
600.99 286.215 M9
D9
72 290.975 S9
147.57 290.975 M9
223.14 295.736 M9
298.71 295.736 M9
374.28 276.694 M9
449.85 271.934 M9
525.42 271.934 M9
600.99 271.934 M9
D9
72 129.124 S9
147.57 181.488 M9
223.14 176.727 M9
298.71 171.967 M9
374.28 171.967 M9
449.85 171.967 M9
525.42 171.967 M9
600.99 171.967 M9
D9
initclip 
30 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 147.57 72 TXC
(|) 0 223.14 72 TXC
(|) 0 298.71 72 TXC
(|) 0 374.28 72 TXC
(|) 0 449.85 72 TXC
(|) 0 525.42 72 TXC
(|) 0 600.99 72 TXC
(|) -90 72 72 TXC
(0.4) 0 57 63 TXR
(|) -90 72 119.603 TXC
(0.5) 0 57 110.603 TXR
(|) -90 72 167.207 TXC
(0.6) 0 57 158.207 TXR
(|) -90 72 214.81 TXC
(0.7) 0 57 205.81 TXR
(|) -90 72 262.413 TXC
(0.8) 0 57 253.413 TXR
(|) -90 72 310.017 TXC
(0.9) 0 57 301.017 TXR
(|) -90 72 357.62 TXC
(1.0) 0 57 348.62 TXR
(|) -90 72 405.223 TXC
(1.1) 0 57 396.223 TXR
(|) -90 72 452.826 TXC
(1.2) 0 57 443.826 TXR
(|) -90 72 500.43 TXC
(1.3) 0 57 491.43 TXR
(|) -90 72 548.033 TXC
(1.4) 0 57 539.033 TXR
(|) -90 72 595.636 TXC
(1.5) 0 57 586.636 TXR
(|) -90 72 643.24 TXC
(1.6) 0 57 634.24 TXR
( (a) Hit = 1 cycle, miss = 12 cycles) 0 342 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 612 72 
L9
0 setlinecap
72 72 72 648 
L9
() 0 612 9.5 TXR
( Ratio (MD/AM)) 90 -19.5 648 TXR
(1K) 0 51.6958 33.9174 TXL
(2K) 0 127.266 0.595041 TXL
(4K) 0 205.996 33.9174 TXL
(8K) 0 283.113 0.595041 TXL
(16K) 0 353.171 33.9174 TXL
(32K) 0 424.627 0.595041 TXL
(64K) 0 500.197 33.9174 TXL
(128K) 0 577.843 0.595041 TXL
() 0 51.6958 2.41736 TXL
() 0 127.266 -30.905 TXL
() 0 205.996 2.41736 TXL
() 0 283.113 -30.905 TXL
() 0 353.171 2.41736 TXL
() 0 424.627 -30.905 TXL
() 0 500.197 2.41736 TXL
() 0 577.843 -30.905 TXL
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<0a> 72 338.579 SY
<0a> 147.57 371.901 SY
<0a> 223.14 386.182 SY
<0a> 298.71 371.901 SY
<0a> 374.28 343.339 SY
<0a> 449.85 295.736 SY
<0a> 525.42 290.975 SY
<0a> 600.99 290.975 SY
<02> 72 319.537 SY
<02> 147.57 357.62 SY
<02> 223.14 367.14 SY
<02> 298.71 343.339 SY
<02> 374.28 290.975 SY
<02> 449.85 276.694 SY
<02> 525.42 276.694 SY
<02> 600.99 276.694 SY
<0e> 72 324.298 SY
<0e> 147.57 348.099 SY
<0e> 223.14 367.14 SY
<0e> 298.71 348.099 SY
<0e> 374.28 305.256 SY
<0e> 449.85 290.975 SY
<0e> 525.42 286.215 SY
<0e> 600.99 281.455 SY
<07> 72 276.694 SY
<07> 147.57 305.256 SY
<07> 223.14 310.017 SY
<07> 298.71 295.736 SY
<07> 374.28 276.694 SY
<07> 449.85 262.413 SY
<07> 525.42 262.413 SY
<07> 600.99 257.653 SY
<0d> 72 300.496 SY
<0d> 147.57 300.496 SY
<0d> 223.14 300.496 SY
<0d> 298.71 286.215 SY
<0d> 374.28 286.215 SY
<0d> 449.85 286.215 SY
<0d> 525.42 286.215 SY
<0d> 600.99 286.215 SY
<04> 72 290.975 SY
<04> 147.57 290.975 SY
<04> 223.14 295.736 SY
<04> 298.71 295.736 SY
<04> 374.28 276.694 SY
<04> 449.85 271.934 SY
<04> 525.42 271.934 SY
<04> 600.99 271.934 SY
<01> 72 129.124 SY
<01> 147.57 181.488 SY
<01> 223.14 176.727 SY
<01> 298.71 171.967 SY
<01> 374.28 171.967 SY
<01> 449.85 171.967 SY
<01> 525.42 171.967 SY
<01> 600.99 171.967 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial 753 w @beginspecial -50 @llx -60 @lly 612 @urx
668 @ury 1767 @rwi @setspecial
%%BeginDocument: summary24.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 612 668
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72 357.62 S9
[] 1.000000 SL
147.57 419.504 M9
223.14 481.388 M9
298.71 452.826 M9
374.28 405.223 M9
449.85 300.496 M9
525.42 295.736 M9
600.99 290.975 M9
D9
72 343.339 S9
147.57 419.504 M9
223.14 452.826 M9
298.71 414.744 M9
374.28 314.777 M9
449.85 281.455 M9
525.42 276.694 M9
600.99 276.694 M9
D9
72 343.339 S9
147.57 386.182 M9
223.14 438.545 M9
298.71 419.504 M9
374.28 338.579 M9
449.85 305.256 M9
525.42 295.736 M9
600.99 286.215 M9
D9
72 281.455 S9
147.57 333.818 M9
223.14 352.86 M9
298.71 333.818 M9
374.28 290.975 M9
449.85 267.174 M9
525.42 262.413 M9
600.99 262.413 M9
D9
72 305.256 S9
147.57 319.537 M9
223.14 314.777 M9
298.71 290.975 M9
374.28 286.215 M9
449.85 286.215 M9
525.42 286.215 M9
600.99 286.215 M9
D9
72 300.496 S9
147.57 305.256 M9
223.14 314.777 M9
298.71 319.537 M9
374.28 286.215 M9
449.85 276.694 M9
525.42 271.934 M9
600.99 271.934 M9
D9
72 105.322 S9
147.57 195.769 M9
223.14 191.008 M9
298.71 171.967 M9
374.28 171.967 M9
449.85 171.967 M9
525.42 171.967 M9
600.99 171.967 M9
D9
initclip 
30 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 147.57 72 TXC
(|) 0 223.14 72 TXC
(|) 0 298.71 72 TXC
(|) 0 374.28 72 TXC
(|) 0 449.85 72 TXC
(|) 0 525.42 72 TXC
(|) 0 600.99 72 TXC
(|) -90 72 72 TXC
(0.4) 0 57 63 TXR
(|) -90 72 119.603 TXC
(0.5) 0 57 110.603 TXR
(|) -90 72 167.207 TXC
(0.6) 0 57 158.207 TXR
(|) -90 72 214.81 TXC
(0.7) 0 57 205.81 TXR
(|) -90 72 262.413 TXC
(0.8) 0 57 253.413 TXR
(|) -90 72 310.017 TXC
(0.9) 0 57 301.017 TXR
(|) -90 72 357.62 TXC
(1.0) 0 57 348.62 TXR
(|) -90 72 405.223 TXC
(1.1) 0 57 396.223 TXR
(|) -90 72 452.826 TXC
(1.2) 0 57 443.826 TXR
(|) -90 72 500.43 TXC
(1.3) 0 57 491.43 TXR
(|) -90 72 548.033 TXC
(1.4) 0 57 539.033 TXR
(|) -90 72 595.636 TXC
(1.5) 0 57 586.636 TXR
(|) -90 72 643.24 TXC
(1.6) 0 57 634.24 TXR
( (b) Hit = 1 cycle, miss = 24 cycles) 0 342 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 612 72 
L9
0 setlinecap
72 72 72 648 
L9
() 0 612 9.5 TXR
() 90 -19.5 648 TXR
(1K) 0 51.6958 33.9174 TXL
(2K) 0 127.266 0.595041 TXL
(4K) 0 205.996 33.9174 TXL
(8K) 0 283.113 0.595041 TXL
(16K) 0 353.171 33.9174 TXL
(32K) 0 424.627 0.595041 TXL
(64K) 0 500.197 33.9174 TXL
(128K) 0 577.843 0.595041 TXL
() 0 51.6958 2.41736 TXL
() 0 127.266 -30.905 TXL
() 0 205.996 2.41736 TXL
() 0 283.113 -30.905 TXL
() 0 353.171 2.41736 TXL
() 0 424.627 -30.905 TXL
() 0 500.197 2.41736 TXL
() 0 577.843 -30.905 TXL
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<0a> 72 357.62 SY
<0a> 147.57 419.504 SY
<0a> 223.14 481.388 SY
<0a> 298.71 452.826 SY
<0a> 374.28 405.223 SY
<0a> 449.85 300.496 SY
<0a> 525.42 295.736 SY
<0a> 600.99 290.975 SY
<02> 72 343.339 SY
<02> 147.57 419.504 SY
<02> 223.14 452.826 SY
<02> 298.71 414.744 SY
<02> 374.28 314.777 SY
<02> 449.85 281.455 SY
<02> 525.42 276.694 SY
<02> 600.99 276.694 SY
<0e> 72 343.339 SY
<0e> 147.57 386.182 SY
<0e> 223.14 438.545 SY
<0e> 298.71 419.504 SY
<0e> 374.28 338.579 SY
<0e> 449.85 305.256 SY
<0e> 525.42 295.736 SY
<0e> 600.99 286.215 SY
<07> 72 281.455 SY
<07> 147.57 333.818 SY
<07> 223.14 352.86 SY
<07> 298.71 333.818 SY
<07> 374.28 290.975 SY
<07> 449.85 267.174 SY
<07> 525.42 262.413 SY
<07> 600.99 262.413 SY
<0d> 72 305.256 SY
<0d> 147.57 319.537 SY
<0d> 223.14 314.777 SY
<0d> 298.71 290.975 SY
<0d> 374.28 286.215 SY
<0d> 449.85 286.215 SY
<0d> 525.42 286.215 SY
<0d> 600.99 286.215 SY
<04> 72 300.496 SY
<04> 147.57 305.256 SY
<04> 223.14 314.777 SY
<04> 298.71 319.537 SY
<04> 374.28 286.215 SY
<04> 449.85 276.694 SY
<04> 525.42 271.934 SY
<04> 600.99 271.934 SY
<01> 72 105.322 SY
<01> 147.57 195.769 SY
<01> 223.14 191.008 SY
<01> 298.71 171.967 SY
<01> 374.28 171.967 SY
<01> 449.85 171.967 SY
<01> 525.42 171.967 SY
<01> 600.99 171.967 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial 752 w @beginspecial -50 @llx -60 @lly 612 @urx
668 @ury 1767 @rwi @setspecial
%%BeginDocument: summary48.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 612 668
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
18 SetSym
<0a> 471.592 619.438 SY
30 /Helvetica-Bold SetTxt
( mmt) 0 495.096 610.438 TXL
18 SetSym
<02> 471.592 580.438 SY
30 /Helvetica-Bold SetTxt
( dtw) 0 495.096 571.438 TXL
18 SetSym
<0e> 471.592 541.438 SY
30 /Helvetica-Bold SetTxt
( qs) 0 495.096 532.438 TXL
18 SetSym
<07> 471.592 502.438 SY
30 /Helvetica-Bold SetTxt
( mean) 0 495.096 493.438 TXL
18 SetSym
<0d> 471.592 463.438 SY
30 /Helvetica-Bold SetTxt
( wavefront) 0 495.096 454.438 TXL
18 SetSym
<04> 471.592 424.438 SY
30 /Helvetica-Bold SetTxt
( paraffins) 0 495.096 415.438 TXL
18 SetSym
<01> 471.592 385.438 SY
30 /Helvetica-Bold SetTxt
( ss) 0 495.096 376.438 TXL
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72 371.901 S9
[] 1.000000 SL
147.57 457.587 M9
223.14 633.719 M9
298.71 614.678 M9
374.28 519.471 M9
449.85 314.777 M9
525.42 295.736 M9
600.99 290.975 M9
D9
72 367.14 S9
147.57 495.669 M9
223.14 595.636 M9
298.71 543.273 M9
374.28 352.86 M9
449.85 290.975 M9
525.42 281.455 M9
600.99 281.455 M9
D9
72 362.38 S9
147.57 433.785 M9
223.14 543.273 M9
298.71 538.512 M9
374.28 390.942 M9
449.85 329.058 M9
525.42 310.017 M9
600.99 295.736 M9
D9
72 281.455 S9
147.57 367.14 M9
223.14 419.504 M9
298.71 395.702 M9
374.28 324.298 M9
449.85 276.694 M9
525.42 267.174 M9
600.99 262.413 M9
D9
72 314.777 S9
147.57 343.339 M9
223.14 338.579 M9
298.71 295.736 M9
374.28 290.975 M9
449.85 290.975 M9
525.42 286.215 M9
600.99 286.215 M9
D9
72 305.256 S9
147.57 314.777 M9
223.14 333.818 M9
298.71 352.86 M9
374.28 300.496 M9
449.85 281.455 M9
525.42 276.694 M9
600.99 276.694 M9
D9
72 76.7603 S9
147.57 224.331 M9
223.14 210.05 M9
298.71 176.727 M9
374.28 171.967 M9
449.85 171.967 M9
525.42 171.967 M9
600.99 171.967 M9
D9
initclip 
(|) 0 72 72 TXC
(|) 0 147.57 72 TXC
(|) 0 223.14 72 TXC
(|) 0 298.71 72 TXC
(|) 0 374.28 72 TXC
(|) 0 449.85 72 TXC
(|) 0 525.42 72 TXC
(|) 0 600.99 72 TXC
(|) -90 72 72 TXC
(0.4) 0 57 63 TXR
(|) -90 72 119.603 TXC
(0.5) 0 57 110.603 TXR
(|) -90 72 167.207 TXC
(0.6) 0 57 158.207 TXR
(|) -90 72 214.81 TXC
(0.7) 0 57 205.81 TXR
(|) -90 72 262.413 TXC
(0.8) 0 57 253.413 TXR
(|) -90 72 310.017 TXC
(0.9) 0 57 301.017 TXR
(|) -90 72 357.62 TXC
(1.0) 0 57 348.62 TXR
(|) -90 72 405.223 TXC
(1.1) 0 57 396.223 TXR
(|) -90 72 452.826 TXC
(1.2) 0 57 443.826 TXR
(|) -90 72 500.43 TXC
(1.3) 0 57 491.43 TXR
(|) -90 72 548.033 TXC
(1.4) 0 57 539.033 TXR
(|) -90 72 595.636 TXC
(1.5) 0 57 586.636 TXR
(|) -90 72 643.24 TXC
(1.6) 0 57 634.24 TXR
( (c) Hit = 1 cycle, miss = 48 cycles) 0 342 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 612 72 
L9
0 setlinecap
72 72 72 648 
L9
() 0 612 9.5 TXR
() 90 -19.5 648 TXR
(1K) 0 51.6958 33.9174 TXL
(2K) 0 127.266 0.595041 TXL
(4K) 0 205.996 33.9174 TXL
(8K) 0 283.113 0.595041 TXL
(16K) 0 353.171 33.9174 TXL
(32K) 0 424.627 0.595041 TXL
(64K) 0 500.197 33.9174 TXL
(128K) 0 577.843 0.595041 TXL
() 0 51.6958 2.41736 TXL
() 0 127.266 -30.905 TXL
() 0 205.996 2.41736 TXL
() 0 283.113 -30.905 TXL
() 0 353.171 2.41736 TXL
() 0 424.627 -30.905 TXL
() 0 500.197 2.41736 TXL
() 0 577.843 -30.905 TXL
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 612.000000 72.000000 612.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<0a> 72 371.901 SY
<0a> 147.57 457.587 SY
<0a> 223.14 633.719 SY
<0a> 298.71 614.678 SY
<0a> 374.28 519.471 SY
<0a> 449.85 314.777 SY
<0a> 525.42 295.736 SY
<0a> 600.99 290.975 SY
<02> 72 367.14 SY
<02> 147.57 495.669 SY
<02> 223.14 595.636 SY
<02> 298.71 543.273 SY
<02> 374.28 352.86 SY
<02> 449.85 290.975 SY
<02> 525.42 281.455 SY
<02> 600.99 281.455 SY
<0e> 72 362.38 SY
<0e> 147.57 433.785 SY
<0e> 223.14 543.273 SY
<0e> 298.71 538.512 SY
<0e> 374.28 390.942 SY
<0e> 449.85 329.058 SY
<0e> 525.42 310.017 SY
<0e> 600.99 295.736 SY
<07> 72 281.455 SY
<07> 147.57 367.14 SY
<07> 223.14 419.504 SY
<07> 298.71 395.702 SY
<07> 374.28 324.298 SY
<07> 449.85 276.694 SY
<07> 525.42 267.174 SY
<07> 600.99 262.413 SY
<0d> 72 314.777 SY
<0d> 147.57 343.339 SY
<0d> 223.14 338.579 SY
<0d> 298.71 295.736 SY
<0d> 374.28 290.975 SY
<0d> 449.85 290.975 SY
<0d> 525.42 286.215 SY
<0d> 600.99 286.215 SY
<04> 72 305.256 SY
<04> 147.57 314.777 SY
<04> 223.14 333.818 SY
<04> 298.71 352.86 SY
<04> 374.28 300.496 SY
<04> 449.85 281.455 SY
<04> 525.42 276.694 SY
<04> 600.99 276.694 SY
<01> 72 76.7603 SY
<01> 147.57 224.331 SY
<01> 223.14 210.05 SY
<01> 298.71 176.727 SY
<01> 374.28 171.967 SY
<01> 449.85 171.967 SY
<01> 525.42 171.967 SY
<01> 600.99 171.967 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial -150 2338 a(Figure)g(4:)16 b(The)11 b(ratio)f(of)h(the)g(total)e
(cycles)j(taken)f(in)f(the)h(\257at)g(implementation)e(vs.)j(the)e(direct)h
(implementation)e(for)i(separate)h Fd(4-way)e(set-associative)-150
2388 y Fn(data)i(and)g(instruction)e(caches)j(of)f(varying)f(sizes.)20
b(The)13 b(miss)f(penalties)g(are)g(12,)h(24,)f(and)g(48)f(cycles)i(in)e(the)
h(three)g(graphs,)g(respectively)m(.)20 b(The)13 b(curve)-150
2438 y(with)c(the)h(\256lled-in)f(squares)i(in)f(each)h(graph)f(indicates)g
(the)g(geometric)g(mean.)965 2675 y(7)p eop
%%Page: 8 8
7 bop -22 945 a @beginspecial -50 @llx -60 @lly 504 @urx 740
@ury 1570 @rwi @setspecial
%%BeginDocument: summary12-1.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 504 740
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
18 SetSym
<0a> 331.218 752 SY
30 /Helvetica-Bold SetTxt
( mmt ) 0 354.722 743 TXL
18 SetSym
<0e> 331.218 713 SY
30 /Helvetica-Bold SetTxt
( qs ) 0 354.722 704 TXL
18 SetSym
<02> 331.218 674 SY
30 /Helvetica-Bold SetTxt
( dtw) 0 354.722 665 TXL
18 SetSym
<07> 331.218 635 SY
30 /Helvetica-Bold SetTxt
( mean ) 0 354.722 626 TXL
18 SetSym
<04> 331.218 596 SY
30 /Helvetica-Bold SetTxt
( paraffins ) 0 354.722 587 TXL
18 SetSym
<0d> 331.218 557 SY
30 /Helvetica-Bold SetTxt
( wavefront ) 0 354.722 548 TXL
18 SetSym
<01> 331.218 518 SY
30 /Helvetica-Bold SetTxt
( ss ) 0 354.722 509 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72 512 S9
[] 1.000000 SL
132.456 544 M9
192.912 512 M9
253.368 528 M9
313.824 480 M9
374.28 488 M9
434.736 496 M9
495.192 448 M9
D9
72 480 S9
132.456 512 M9
192.912 512 M9
253.368 496 M9
313.824 480 M9
374.28 456 M9
434.736 464 M9
495.192 440 M9
D9
72 456 S9
132.456 536 M9
192.912 504 M9
253.368 488 M9
313.824 464 M9
374.28 464 M9
434.736 456 M9
495.192 424 M9
D9
72 408 S9
132.456 424 M9
192.912 416 M9
253.368 408 M9
313.824 384 M9
374.28 400 M9
434.736 416 M9
495.192 392 M9
D9
72 448 S9
132.456 464 M9
192.912 472 M9
253.368 472 M9
313.824 440 M9
374.28 440 M9
434.736 440 M9
495.192 408 M9
D9
72 424 S9
132.456 400 M9
192.912 384 M9
253.368 384 M9
313.824 376 M9
374.28 368 M9
434.736 432 M9
495.192 432 M9
D9
72 192 S9
132.456 168 M9
192.912 176 M9
253.368 168 M9
313.824 136 M9
374.28 240 M9
434.736 240 M9
495.192 240 M9
D9
initclip 
(|) 0 72 72 TXC
(|) 0 132.456 72 TXC
(|) 0 192.912 72 TXC
(|) 0 253.368 72 TXC
(|) 0 313.824 72 TXC
(|) 0 374.28 72 TXC
(|) 0 434.736 72 TXC
(|) 0 495.192 72 TXC
(|) -90 72 72 TXC
(0.4) 0 57 63 TXR
(|) -90 72 152 TXC
(0.5) 0 57 143 TXR
(|) -90 72 232 TXC
(0.6) 0 57 223 TXR
(|) -90 72 312 TXC
(0.7) 0 57 303 TXR
(|) -90 72 392 TXC
(0.8) 0 57 383 TXR
(|) -90 72 472 TXC
(0.9) 0 57 463 TXR
(|) -90 72 552 TXC
(1.0) 0 57 543 TXR
(|) -90 72 632 TXC
(1.1) 0 57 623 TXR
(|) -90 72 712 TXC
(1.2) 0 57 703 TXR
( (a) Hit = 1 cycle, miss = 12 cycles) 0 288 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 504 72 
L9
0 setlinecap
72 72 72 720 
L9
() 0 504 9.5 TXR
( Ratio (MD/AM)) 90 -19.5 720 TXR
(1K) 0 55.7566 40 TXL
(2K) 0 116.213 8 TXL
(4K) 0 179.197 40 TXL
(8K) 0 240.89 8 TXL
(16K) 0 296.937 40 TXL
(32K) 0 354.101 8 TXL
(64K) 0 414.557 40 TXL
(128K) 0 476.675 8 TXL
() 0 55.7566 8.5 TXL
() 0 116.213 -23.5 TXL
() 0 179.197 8.5 TXL
() 0 240.89 -23.5 TXL
() 0 296.937 8.5 TXL
() 0 354.101 -23.5 TXL
() 0 414.557 8.5 TXL
() 0 476.675 -23.5 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<0a> 72 512 SY
<0a> 132.456 544 SY
<0a> 192.912 512 SY
<0a> 253.368 528 SY
<0a> 313.824 480 SY
<0a> 374.28 488 SY
<0a> 434.736 496 SY
<0a> 495.192 448 SY
<0e> 72 480 SY
<0e> 132.456 512 SY
<0e> 192.912 512 SY
<0e> 253.368 496 SY
<0e> 313.824 480 SY
<0e> 374.28 456 SY
<0e> 434.736 464 SY
<0e> 495.192 440 SY
<02> 72 456 SY
<02> 132.456 536 SY
<02> 192.912 504 SY
<02> 253.368 488 SY
<02> 313.824 464 SY
<02> 374.28 464 SY
<02> 434.736 456 SY
<02> 495.192 424 SY
<07> 72 408 SY
<07> 132.456 424 SY
<07> 192.912 416 SY
<07> 253.368 408 SY
<07> 313.824 384 SY
<07> 374.28 400 SY
<07> 434.736 416 SY
<07> 495.192 392 SY
<04> 72 448 SY
<04> 132.456 464 SY
<04> 192.912 472 SY
<04> 253.368 472 SY
<04> 313.824 440 SY
<04> 374.28 440 SY
<04> 434.736 440 SY
<04> 495.192 408 SY
<0d> 72 424 SY
<0d> 132.456 400 SY
<0d> 192.912 384 SY
<0d> 253.368 384 SY
<0d> 313.824 376 SY
<0d> 374.28 368 SY
<0d> 434.736 432 SY
<0d> 495.192 432 SY
<01> 72 192 SY
<01> 132.456 168 SY
<01> 192.912 176 SY
<01> 253.368 168 SY
<01> 313.824 136 SY
<01> 374.28 240 SY
<01> 434.736 240 SY
<01> 495.192 240 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial 675 w @beginspecial -50 @llx -60 @lly 504 @urx
740 @ury 1570 @rwi @setspecial
%%BeginDocument: summary24-1.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 504 740
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72 536 S9
[] 1.000000 SL
132.456 592 M9
192.912 560 M9
253.368 600 M9
313.824 520 M9
374.28 528 M9
434.736 552 M9
495.192 464 M9
D9
72 504 S9
132.456 552 M9
192.912 568 M9
253.368 560 M9
313.824 536 M9
374.28 496 M9
434.736 512 M9
495.192 464 M9
D9
72 472 S9
132.456 600 M9
192.912 568 M9
253.368 552 M9
313.824 520 M9
374.28 520 M9
434.736 496 M9
495.192 432 M9
D9
72 416 S9
132.456 432 M9
192.912 424 M9
253.368 424 M9
313.824 376 M9
374.28 416 M9
434.736 440 M9
495.192 400 M9
D9
72 472 S9
132.456 496 M9
192.912 512 M9
253.368 528 M9
313.824 472 M9
374.28 472 M9
434.736 472 M9
495.192 416 M9
D9
72 416 S9
132.456 384 M9
192.912 352 M9
253.368 344 M9
313.824 328 M9
374.28 312 M9
434.736 432 M9
495.192 432 M9
D9
72 168 S9
132.456 136 M9
192.912 136 M9
253.368 120 M9
313.824 72 M9
374.28 240 M9
434.736 240 M9
495.192 240 M9
D9
initclip 
30 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 132.456 72 TXC
(|) 0 192.912 72 TXC
(|) 0 253.368 72 TXC
(|) 0 313.824 72 TXC
(|) 0 374.28 72 TXC
(|) 0 434.736 72 TXC
(|) 0 495.192 72 TXC
(|) -90 72 72 TXC
(0.4) 0 57 63 TXR
(|) -90 72 152 TXC
(0.5) 0 57 143 TXR
(|) -90 72 232 TXC
(0.6) 0 57 223 TXR
(|) -90 72 312 TXC
(0.7) 0 57 303 TXR
(|) -90 72 392 TXC
(0.8) 0 57 383 TXR
(|) -90 72 472 TXC
(0.9) 0 57 463 TXR
(|) -90 72 552 TXC
(1.0) 0 57 543 TXR
(|) -90 72 632 TXC
(1.1) 0 57 623 TXR
(|) -90 72 712 TXC
(1.2) 0 57 703 TXR
( (b) Hit = 1 cycle, miss = 24 cycles) 0 288 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 504 72 
L9
0 setlinecap
72 72 72 720 
L9
() 0 504 9.5 TXR
() 90 -19.5 720 TXR
(Cache size) 0 226.208 -24 TXL
(1K) 0 55.7566 40 TXL
(2K) 0 116.213 8 TXL
(4K) 0 179.197 40 TXL
(8K) 0 240.89 8 TXL
(16K) 0 296.937 40 TXL
(32K) 0 354.101 8 TXL
(64K) 0 414.557 40 TXL
(128K) 0 476.675 8 TXL
() 0 226.208 -55.5 TXL
() 0 55.7566 8.5 TXL
() 0 116.213 -23.5 TXL
() 0 179.197 8.5 TXL
() 0 240.89 -23.5 TXL
() 0 296.937 8.5 TXL
() 0 354.101 -23.5 TXL
() 0 414.557 8.5 TXL
() 0 476.675 -23.5 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<0a> 72 536 SY
<0a> 132.456 592 SY
<0a> 192.912 560 SY
<0a> 253.368 600 SY
<0a> 313.824 520 SY
<0a> 374.28 528 SY
<0a> 434.736 552 SY
<0a> 495.192 464 SY
<0e> 72 504 SY
<0e> 132.456 552 SY
<0e> 192.912 568 SY
<0e> 253.368 560 SY
<0e> 313.824 536 SY
<0e> 374.28 496 SY
<0e> 434.736 512 SY
<0e> 495.192 464 SY
<02> 72 472 SY
<02> 132.456 600 SY
<02> 192.912 568 SY
<02> 253.368 552 SY
<02> 313.824 520 SY
<02> 374.28 520 SY
<02> 434.736 496 SY
<02> 495.192 432 SY
<07> 72 416 SY
<07> 132.456 432 SY
<07> 192.912 424 SY
<07> 253.368 424 SY
<07> 313.824 376 SY
<07> 374.28 416 SY
<07> 434.736 440 SY
<07> 495.192 400 SY
<04> 72 472 SY
<04> 132.456 496 SY
<04> 192.912 512 SY
<04> 253.368 528 SY
<04> 313.824 472 SY
<04> 374.28 472 SY
<04> 434.736 472 SY
<04> 495.192 416 SY
<0d> 72 416 SY
<0d> 132.456 384 SY
<0d> 192.912 352 SY
<0d> 253.368 344 SY
<0d> 313.824 328 SY
<0d> 374.28 312 SY
<0d> 434.736 432 SY
<0d> 495.192 432 SY
<01> 72 168 SY
<01> 132.456 136 SY
<01> 192.912 136 SY
<01> 253.368 120 SY
<01> 313.824 72 SY
<01> 374.28 240 SY
<01> 434.736 240 SY
<01> 495.192 240 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial 675 w @beginspecial -50 @llx -60 @lly 504 @urx
740 @ury 1570 @rwi @setspecial
%%BeginDocument: summary48-1.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 504 740
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72 552 S9
[] 1.000000 SL
132.456 632 M9
192.912 608 M9
253.368 696 M9
313.824 568 M9
374.28 608 M9
434.736 648 M9
495.192 488 M9
D9
72 528 S9
132.456 600 M9
192.912 624 M9
253.368 632 M9
313.824 624 M9
374.28 560 M9
434.736 592 M9
495.192 512 M9
D9
72 488 S9
132.456 664 M9
192.912 648 M9
253.368 648 M9
313.824 608 M9
374.28 616 M9
434.736 576 M9
495.192 456 M9
D9
72 416 S9
132.456 448 M9
192.912 440 M9
253.368 448 M9
313.824 376 M9
374.28 440 M9
434.736 488 M9
495.192 424 M9
D9
72 480 S9
132.456 520 M9
192.912 560 M9
253.368 600 M9
313.824 520 M9
374.28 536 M9
434.736 536 M9
495.192 432 M9
D9
72 416 S9
132.456 368 M9
192.912 312 M9
253.368 296 M9
313.824 264 M9
374.28 232 M9
434.736 440 M9
495.192 440 M9
D9
72 152 S9
132.456 96 M9
192.912 96 M9
253.368 72 M9
313.824 -1.42109e-14 M9
374.28 240 M9
434.736 240 M9
495.192 240 M9
D9
initclip 
30 /Helvetica-Bold SetTxt
(|) 0 72 72 TXC
(|) 0 132.456 72 TXC
(|) 0 192.912 72 TXC
(|) 0 253.368 72 TXC
(|) 0 313.824 72 TXC
(|) 0 374.28 72 TXC
(|) 0 434.736 72 TXC
(|) 0 495.192 72 TXC
(|) -90 72 72 TXC
(0.4) 0 57 63 TXR
(|) -90 72 152 TXC
(0.5) 0 57 143 TXR
(|) -90 72 232 TXC
(0.6) 0 57 223 TXR
(|) -90 72 312 TXC
(0.7) 0 57 303 TXR
(|) -90 72 392 TXC
(0.8) 0 57 383 TXR
(|) -90 72 472 TXC
(0.9) 0 57 463 TXR
(|) -90 72 552 TXC
(1.0) 0 57 543 TXR
(|) -90 72 632 TXC
(1.1) 0 57 623 TXR
(|) -90 72 712 TXC
(1.2) 0 57 703 TXR
( (c) Hit = 1 cycle, miss = 48 cycles) 0 288 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 504 72 
L9
0 setlinecap
72 72 72 720 
L9
() 0 504 9.5 TXR
() 90 -19.5 720 TXR
(1K) 0 55.7566 40 TXL
(2K) 0 116.213 8 TXL
(4K) 0 179.197 40 TXL
(8K) 0 240.89 8 TXL
(16K) 0 296.937 40 TXL
(32K) 0 354.101 8 TXL
(64K) 0 414.557 40 TXL
(128K) 0 476.675 8 TXL
() 0 55.7566 8.5 TXL
() 0 116.213 -23.5 TXL
() 0 179.197 8.5 TXL
() 0 240.89 -23.5 TXL
() 0 296.937 8.5 TXL
() 0 354.101 -23.5 TXL
() 0 414.557 8.5 TXL
() 0 476.675 -23.5 TXL
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 504.000000 72.000000 504.000000 720.000000 72.000000 720.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<0a> 72 552 SY
<0a> 132.456 632 SY
<0a> 192.912 608 SY
<0a> 253.368 696 SY
<0a> 313.824 568 SY
<0a> 374.28 608 SY
<0a> 434.736 648 SY
<0a> 495.192 488 SY
<0e> 72 528 SY
<0e> 132.456 600 SY
<0e> 192.912 624 SY
<0e> 253.368 632 SY
<0e> 313.824 624 SY
<0e> 374.28 560 SY
<0e> 434.736 592 SY
<0e> 495.192 512 SY
<02> 72 488 SY
<02> 132.456 664 SY
<02> 192.912 648 SY
<02> 253.368 648 SY
<02> 313.824 608 SY
<02> 374.28 616 SY
<02> 434.736 576 SY
<02> 495.192 456 SY
<07> 72 416 SY
<07> 132.456 448 SY
<07> 192.912 440 SY
<07> 253.368 448 SY
<07> 313.824 376 SY
<07> 374.28 440 SY
<07> 434.736 488 SY
<07> 495.192 424 SY
<04> 72 480 SY
<04> 132.456 520 SY
<04> 192.912 560 SY
<04> 253.368 600 SY
<04> 313.824 520 SY
<04> 374.28 536 SY
<04> 434.736 536 SY
<04> 495.192 432 SY
<0d> 72 416 SY
<0d> 132.456 368 SY
<0d> 192.912 312 SY
<0d> 253.368 296 SY
<0d> 313.824 264 SY
<0d> 374.28 232 SY
<0d> 434.736 440 SY
<0d> 495.192 440 SY
<01> 72 152 SY
<01> 132.456 96 SY
<01> 192.912 96 SY
<01> 253.368 72 SY
<01> 313.824 -1.42109e-14 SY
<01> 374.28 240 SY
<01> 434.736 240 SY
<01> 495.192 240 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial -150 1036 a Fn(Figure)12 b(5:)20 b(The)13 b(ratio)f(of)h(the)g
(total)e(cycles)j(taken)f(in)f(the)h(MD)g(implementation)e(vs.)j(the)e(AM)h
(implementation)f(for)g(separate)i Fd(dir)o(ect-mapped)g Fn(data)-150
1086 y(and)d(instruction)e(caches)k(of)e(varying)f(sizes.)19
b(The)12 b(miss)f(penalty)g(is)g(12,)g(24,)g(and)h(48)e(cycles)i(in)f(the)g
(three)g(graphs,)h(respectively)m(.)18 b(The)12 b(curve)f(with)f(the)-150
1136 y(\256lled-in)f(squares)i(in)e(each)j(graph)e(indicates)g(the)g
(geometric)g(mean.)-150 1311 y(for)15 b(4-way)h(set-associative)g(caches)i
(\(Figure)d(4\).)32 b(The)17 b(reason)f(for)g(the)-150 1361
y(dip)d(in)g(the)g(8\26116)f(K)i(range,)h(indicating)d(superior)g(MD)i
(implementation)-150 1411 y(performance,)h(is)e(relatively)f(poor)g
(instruction)f(cache)k(performance)f(for)-150 1460 y(the)h(AM)g
(implementation,)g(a)g(predictable)f(consequence)i(of)f(the)g(lesser)-150
1510 y(control)9 b(locality)m(.)-108 1560 y(As)14 b(Sub\256gure)h(5\(a\))f
(shows,)j(when)d(the)h(miss)g(cost)g(is)f(12)h(cycles,)i(all)-150
1610 y(programs)10 b(do)f(better)g(in)g(the)g(MD)h(than)f(the)h(AM)f
(implementation.)14 b(When)-150 1660 y(the)i(miss)g(cost)h(increases)g(to)f
(24)f(cycles,)k(as)e(in)f(sub\256gure)f(\(b\),)j(matrix)-150
1709 y(multiply)7 b(and)i(discrete)g(time)g(warp)h(perform)e(better)h(in)g
(the)g(AM)g(than)f(MD)-150 1759 y(implementation)i(for)i(some)g(cache)h
(sizes.)21 b(At)11 b(48)g(cycles,)i(sub\256gure)f(\(c\),)-150
1809 y(the)c(bene\256ts)h(of)f(the)g(AM)h(implementation)e(for)h(matrix)g
(multiply)m(,)f(discrete)-150 1859 y(time)12 b(warp,)g(and)g(quicksort)e(are)
i(pronounced,)f(but)g(the)h(geometric)f(mean)-150 1909 y(indicates)f(overall)
g(superior)g(performance)h(in)f(the)h(MD)f(implementation.)-150
1959 y(T)m(o)h(remove)h(the)e(ef)o(fects)i(of)e(the)h(outlier)n(,)f
(selection)h(sort,)f(Figure)h(6)f(shows)-150 2008 y(the)15
b(geometric)f(means)i(of)f(all)f(the)g(programs)h(except)g(for)f(it.)28
b(The)15 b(MD)-150 2058 y(implementation)c(still)g(performs)h(better)g(than)g
(the)g(AM)h(implementation)-150 2108 y(for)f(miss)h(costs)g(of)g(12)f(and)h
(24)f(cycles,)j(although)c(less)j(dramatically)e(so.)-150 2158
y(W)n(ith)k(a)h(miss)f(cost)g(of)g(48)g(cycles,)j(the)e(geometric)f(mean)h
(for)f(the)g(AM)-150 2208 y(implementation)9 b(is)h(sometimes)h(slightly)d
(superior)n(.)-150 2323 y Fe(3.4)50 b(Summary)-150 2401 y Fn(The)12
b(cache)h(bene\256ts)f(of)f(T)m(AM')n(s)h(two-level)e(scheduling)g(hierarchy)
i(have)-150 2450 y(been)17 b(overstated.)36 b(For)16 b(the)h
(\256nest-grained)g(test)f(programs,)j(the)e(two-)-150 2500
y(level)9 b(scheduling)g(hierarchy)h(of)f(the)g(AM)h(implementation)e(had)i
(superior)-150 2550 y(performance)h(for)f(medium-sized)h(caches)h(and)e(for)g
(high)g(miss)g(penalties.)996 1311 y(The)e(MD)g(implementation)f(performed)h
(well)f(at)h(all)g(cache)h(con\256gurations)996 1361 y(for)h(less)g
(\256nely-grained)f(programs.)996 1508 y Fj(4)58 b(Conclusions)996
1604 y Fn(W)m(e)9 b(have)g(performed)g(the)f(\256rst)h(quantitative)e(study)h
(of)g(the)h(cache)h(bene\256ts)996 1653 y(of)16 b(T)m(AM')n(s)f(two-level)h
(scheduling)f(hierarchy)h(and)g(Active)g(Messages')996 1703
y(decision)10 b(to)g(use)h(short)e(message)k(handlers)d(rather)g(than)g
(message-driven)996 1753 y(computation,)j(even)h(when)g(hardware)g(message)h
(queues)f(are)h(available.)996 1803 y(The)g(signi\256cance)g(of)g(this)f
(work)g(extends)g(to)g(all)h(\256ne-grained)f(compu-)996 1853
y(tation)i(occurring)h(on)h(systems)g(with)f(caches)i(and)f(hardware-buf)o
(fered)996 1902 y(queues.)k(Speci\256cally)m(,)14 b(we)f(have)g(measured)g
(in)f(which)g(cases)i(the)f(cache)996 1952 y(bene\256ts)e(of)f(Active)h
(Messages)h(outweigh)e(their)g(additional)f(control)g(cost)996
2002 y(and)f(the)g(cost)g(of)g(moving)f(data)h(from)g(the)g(message)i(queue)f
(to)e(frame)i(mem-)996 2052 y(ory)m(.)23 b(The)14 b(message-driven)g
(implementation)e(is)h(superior)f(not)h(only)f(for)996 2102
y(caches)k(so)e(lar)o(ge)h(or)f(so)h(small)f(that)g(the)g(absolute)g(number)g
(of)g(accesses)996 2151 y(dominates)d(but)g(also)h(when)g(the)g(MD)g
(implementation)e(has)j(higher)e(miss)996 2201 y(rates)h(but)g
(signi\256cantly)e(lower)i(total)f(accesses.)24 b(The)13 b(MD)f(implementa-)
996 2251 y(tion)c(is)i(especially)g(strong)f(in)h(direct-mapped)f(caches,)k
(where)d(its)f(control)996 2301 y(locality)e(leads)j(to)e(better)g
(instruction)f(cache)j(performance.)16 b(The)9 b(AM)g(im-)996
2351 y(plementation)h(is)h(strongest)f(when)h(miss)h(penalties)e(are)i(high)e
(and)i(for)e(the)996 2401 y(\256nest-grained)i(programs.)25
b(While)13 b(our)g(results)g(were)h(only)e(for)h(unipro-)996
2450 y(cessors,)d(our)e(isolation)e(of)i(a)h(uniprocessor)e(anomaly)i
(\(Section)e(2.4\))h(gives)996 2500 y(reason)15 b(to)f(believe)g(our)g(work)g
(would)g(extend)g(to)g(multiple)f(processors,)996 2550 y(although)8
b(further)i(research)h(needs)g(to)f(be)h(done.)965 2675 y(8)p
eop
%%Page: 9 9
8 bop 53 867 a @beginspecial -50 @llx -60 @lly 576 @urx 668
@ury 1702 @rwi @setspecial
%%BeginDocument: 1way-no-as.ps
%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: -50 -60 576 668
%%Pages: 1
%%DocumentFonts: Helvetica Helvetica-Oblique Helvetica-Bold Helvetica-BoldOblique Times-Roman Times-Italics Times-Bold Times-BoldItalics
%%EndComments
50 dict begin
/symbolFont 10 dict def
symbolFont begin
/FontType 3 def
/FontMatrix [.001 0 0 .001 0 0] def
/FontBBox [-500 -500 500 500] def
/Encoding 256 array def
0 1 255 {Encoding exch /.notdef put} for
Encoding 1 /Cross put
Encoding 2 /Triangle put
Encoding 3 /Trianglefilled put
Encoding 4 /Diamond put
Encoding 5 /Diamondfilled put
Encoding 6 /Square put
Encoding 7 /Squarefilled put
Encoding 8 /Rectan put
Encoding 9 /Rectanfilled put
Encoding 10 /Circle put
Encoding 11 /Circlefilled put
Encoding 12 /Bullet put
Encoding 13 /Star put
Encoding 14 /Plus put

/graphclip {newpath moveto lineto lineto lineto closepath clip } def

/Procs 15 dict def
Procs begin
/.notdef {} def

/Cross {
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

/Triangle {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath stroke } def

/Trianglefilled {
 newpath -500 -500 moveto 0 500 lineto 500 -500 lineto closepath fill } def

/Diamond {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
 stroke } def

/Diamondfilled {
  newpath -500 0 moveto 0 500 lineto 500 0 lineto 0 -500 lineto closepath
  fill } def

/Square {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath stroke } def

/Squarefilled {
 newpath -500 -500 moveto -500 500 lineto 500 500 lineto 500 -500 lineto
 closepath fill } def

/Rectan {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath stroke } def

/Rectanfilled {
 newpath -200 -500 moveto -200 500 lineto 200 500 lineto 200 -500 lineto  
closepath fill } def


/Circle { newpath 0 0 500 0 360 arc stroke } def

/Circlefilled { newpath 0 0 500 0 360 arc closepath fill } def


/Bullet { newpath 0 0 500 0 360 arc closepath fill } def

/Plus {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke } def

/Star {
 newpath 0 -500 moveto 0 500 lineto stroke
 newpath -500 0 moveto 500 0 lineto stroke
 newpath -500 -500 moveto 500 500 lineto stroke
 newpath -500 500 moveto 500 -500 lineto stroke } def

end

/BuildChar {
 1000 0 -500 -500 500 500 setcachedevice
 exch begin Encoding exch get Procs exch get end exec } def
end

/Symbols symbolFont definefont pop

% size SetSym		-> set font to be symbols scaled by 'size'
/SetSym { /Symbols findfont exch scalefont setfont } def

% size fontname SetTxt		-> set font 'fontname' scaled by 'size'
/SetTxt { findfont exch scalefont setfont } def

% dashtype thicknes SL
/SL { setlinewidth 0 setdash } def

/cross {2 copy le {exch pop} {pop} ifelse} def

%9 added to distinguish from other clashing scribe definitions
% from to L9	-> print line between points 'from' and 'to'
/L9 { newpath moveto lineto stroke } def
/S9 { newpath moveto } def
/M9 { lineto } def
/D9 { stroke } def

%%%%
%%%% setscreen is not EPSF compliant. if compliance is required,
%%%% switch which of the following two definitions of SS9 is commented
%%%% out. it would probably be better to do this by having a seperate
%%%% version of the prolog file for the user to select.
%%%%
%%%% /SS9 { pop pop pop } def
/SS9 { setscreen } def

/G9 { setgray } def
/F9 {newpath moveto lineto lineto lineto closepath fill} def
/E9 {closepath fill} def
% E9 is fills for incremental curves, while F9 for curve segments

/Landscape {612 0 translate 90 rotate} def

% save current point in global variable psx psy
/SAVPOS { /psx currentpoint pop def /psy currentpoint exch pop def } def

% string angle xpos ypos TXL	-> print 'string' at pos xpos, ypos
/TXL { gsave translate rotate 0 0 moveto show SAVPOS grestore } def

% string angle xpos ypos TXR	-> print 'string' at pos xpos, ypos
/TXR { gsave translate rotate dup stringwidth pop neg 0 moveto show SAVPOS 
       grestore } def

% string angle xpos ypos TXC	-> print 'string' at pos xpos, ypos
/TXC { gsave translate rotate dup stringwidth pop 2 div neg 0 moveto show
       SAVPOS grestore } def

% string angle TXREL	-> print 'string' at xpos ypos translate psx psy rel
/TXREL { gsave translate rotate psx psy moveto show SAVPOS grestore } def

% char xpos ypos SY	-> print symbol 'char' at position xpos, ypos
/SY { moveto show } def

/len {dup mul exch dup mul add sqrt}def


%%%%%%%%%%%%%%%%%%%%%%%  CURVE SMOOTHING  %%%%%%%%%%%%%%%%%%%%%%

% Curve Smoothing Routines
%  Ernest Wood  -  Wed Apr 16 09:05:05 1986
%
%  These routines will ALWAYS create a smooth curve which
%  intercepts EVERY point used to generate them.
%
%  The definition qA determines the amount of overshoot smoothing
%  produces around each point.  The distance is the distance to the
%  next point times aA.  The factor qB scales the amount of overshoot
%  by the acuteness of the angle around the point.
%
%  These values make a square of points into a circle.
/qA .3 def		% used in qx
/qB 1 def		% used in afactor

/8a 8 array def
%
%  Angle of vector from p0 to p1	p0 p1 polar ang
/polar{qs neg exch neg atan}def 

%subtract and add points	p0 p1 qs p0-p1
%				p0 p1 qa p0+p1
/qs{exch 3 1 roll sub 3 1 roll sub exch}def
/qa{exch 3 1 roll add 3 1 roll add exch}def

%  Extract point from 8 point array
%
/Pt{2 mul dup 8a exch get exch 1 add 8a exch get}def

%  a0 a1 mirrorang ma
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then ma is the mirror angle between p0-p1 and p1-p2.
%  a0 a1 afactor f
%	If a0 is the angle from p1 to p0 and a1 is the angle from
%	p1 to p2 then f is the ratio of the inside angle between a0 and a1
%	and 180 times qB.  This ratio is saturated at 1 and if qB is 0 then
%	the value returned is always 1.  Thus the more acute the angle 
%	the smaller the value of f.
%
/mirrorang{2 copy add 2 div 3 1 roll sub 0 lt {90} {-90}ifelse add}def
/afactor{
    qB 0 eq
	{ 1 }
	{sub abs dup 180 gt {360 exch sub} if 180 div qB mul
	 dup 1 gt {pop 1} if}
    ifelse
}def

%  a d xya x y
%	Given angle a and distance d
%	produce x and y offsets.
%
/xya{exch 2 copy cos mul 3 1 roll sin mul}def

%  p0 p1 p2 p3  qx  pp1 pp2 pp3
%	Given 4 points on a curve produce the pp# values needed by
%	curveto to draw a smooth curve between p1 and p2.  The slope
%	of the curve at p1 and p2 will be perpendicular to the bisector
%	of a angle between p0/p1/p2 or p1/p2/p3.
%
/qx{
    8a astore pop
    1 Pt 2 Pt qs len qA mul /dist exch def
    1 Pt 0 Pt polar
    1 Pt 2 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 1 Pt qa
    2 Pt 3 Pt polar
    2 Pt 1 Pt polar
    2 copy mirrorang
    3 1 roll afactor dist mul
    xya 2 Pt qa
    2 Pt
}def

/qp{8 copy 16 -2 roll pop pop}def
/ns1{4 copy 4 -2 roll 2 copy qa 4 2 roll qs 6 2 roll /ns{ns2}def }def
/ns2{qp qx curveto}def

%  User definitions for curve smoothing routines.
%	First (ms), intermediate (ns), and last points with (fs) and
%	without (nsfs) automatic stroke execution.
%
/ms{2 copy newpath moveto /ns{ns1}def}def
/ns{ns1}def
/fs{stroke}def
/nsfs{ns 4 copy 2 copy qa 4 2 roll qs qx curveto}def
/nsend{4 copy 2 copy qa 4 2 roll qs qx curveto}def
%%EndProlog
%%Page ? 1
18 SetSym
<06> 398.041 648 SY
30 /Helvetica-Bold SetTxt
( 48-cycle miss) 0 421.545 639 TXL
18 SetSym
<02> 398.041 609 SY
30 /Helvetica-Bold SetTxt
( 24-cycle miss) 0 421.545 600 TXL
18 SetSym
<0a> 398.041 570 SY
30 /Helvetica-Bold SetTxt
( 12-cycle miss) 0 421.545 561 TXL
72.000000 72.000000 576.000000 72.000000 576.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 576.000000 72.000000 576.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72 273.6 S9
[] 1.000000 SL
142.73 504 M9
213.461 446.4 M9
284.191 532.8 M9
354.921 331.2 M9
425.652 302.4 M9
496.382 532.8 M9
567.112 187.2 M9
D9
72 244.8 S9
142.73 388.8 M9
213.461 331.2 M9
284.191 360 M9
354.921 216 M9
425.652 187.2 M9
496.382 273.6 M9
567.112 100.8 M9
D9
72 187.2 S9
142.73 273.6 M9
213.461 216 M9
284.191 216 M9
354.921 129.6 M9
425.652 100.8 M9
496.382 158.4 M9
567.112 72 M9
D9
initclip 
(|) 0 72 72 TXC
(|) 0 142.73 72 TXC
(|) 0 213.461 72 TXC
(|) 0 284.191 72 TXC
(|) 0 354.921 72 TXC
(|) 0 425.652 72 TXC
(|) 0 496.382 72 TXC
(|) 0 567.112 72 TXC
(|) -90 72 72 TXC
(0.85) 0 57 63 TXR
(|) -90 72 216 TXC
(0.90) 0 57 207 TXR
(|) -90 72 360 TXC
(0.95) 0 57 351 TXR
(|) -90 72 504 TXC
(1.00) 0 57 495 TXR
(|) -90 72 648 TXC
(1.05) 0 57 639 TXR
() 0 324 -60 TXC
[] 8.000000 SL
2 setlinecap
72 72 576 72 
L9
0 setlinecap
72 72 72 648 
L9
( Cache Size) 0 576 9.5 TXR
( Ratio (MD/AM)) 90 -19.5 648 TXR
(1K) 0 52.9961 43.2 TXL
(2K) 0 123.726 43.2 TXL
(4K) 0 197.415 43.2 TXL
(8K) 0 269.592 43.2 TXL
(16K) 0 335.164 43.2 TXL
(32K) 0 402.044 43.2 TXL
(64K) 0 472.774 43.2 TXL
(128K) 0 545.448 43.2 TXL
() 0 52.9961 11.7 TXL
() 0 123.726 11.7 TXL
() 0 197.415 11.7 TXL
() 0 269.592 11.7 TXL
() 0 335.164 11.7 TXL
() 0 402.044 11.7 TXL
() 0 472.774 11.7 TXL
() 0 545.448 11.7 TXL
72.000000 72.000000 576.000000 72.000000 576.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
72.000000 72.000000 576.000000 72.000000 576.000000 648.000000 72.000000 648.000000 newpath moveto lineto lineto lineto closepath clip
18 SetSym
<06> 72 273.6 SY
<06> 142.73 504 SY
<06> 213.461 446.4 SY
<06> 284.191 532.8 SY
<06> 354.921 331.2 SY
<06> 425.652 302.4 SY
<06> 496.382 532.8 SY
<06> 567.112 187.2 SY
<02> 72 244.8 SY
<02> 142.73 388.8 SY
<02> 213.461 331.2 SY
<02> 284.191 360 SY
<02> 354.921 216 SY
<02> 425.652 187.2 SY
<02> 496.382 273.6 SY
<02> 567.112 100.8 SY
<0a> 72 187.2 SY
<0a> 142.73 273.6 SY
<0a> 213.461 216 SY
<0a> 284.191 216 SY
<0a> 354.921 129.6 SY
<0a> 425.652 100.8 SY
<0a> 496.382 158.4 SY
<0a> 567.112 72 SY
initclip 
showpage
%%Trailer
end
%%EndDocument
 @endspecial -150 958 a Fn(Figure)11 b(6:)17 b(The)12 b(geometric)f(means)i
(of)e(the)h(ratio)e(\(MD/AM\))h(of)g(the)g(total)-150 1008
y(cycles)d(taken)g(in)e(all)h(programs)h(except)f(selection-sort)g(for)f
(direct-mapped)-150 1057 y(caches.)-108 1222 y(More)14 b(generally)m(,)i(we)g
(have)f(shown)f(that)g(the)h(J-Machine')n(s)f(buf)o(fered)-150
1272 y(message)k(queues,)h(an)e(inexpensive)f(mechanism,)j(can)f(provide)d(a)
i(real)-150 1322 y(bene\256t)d(over)f(the)g(Active)g(Messages)i(approach.)25
b(The)14 b(bene\256t)g(of)f(hard-)-150 1372 y(ware)8 b(dispatch)f(has)h(been)
g(shown)f(elsewhere)i([SGS)613 1357 y Fi(+)640 1372 y Fn(93].)14
b(The)8 b(net)f(lesson)-150 1421 y(is)12 b(that)g(hardware)h(mechanisms)h
(for)e(\256ne-grained)h(parallelism)f(can)h(sig-)-150 1471
y(ni\256cantly)c(improve)h(performance.)-108 1521 y(Our)k(results)g(depend)h
(heavily)f(on)g(cache)j(miss)e(penalties)f(and)h(cache)-150
1571 y(sizes.)22 b(In)12 b(the)g(future,)g(we)h(can)g(expect)f(both)f(the)h
(miss)h(penalty)e(and)i(size)-150 1621 y(of)h(caches)j(to)d(grow)m(.)28
b(While)14 b(higher)g(penalties)g(cause)i(data)f(locality)e(to)-150
1670 y(increase)j(in)e(importance,)i(lar)o(ger)e(caches)j(with)c(their)h
(lower)g(miss)h(rates)-150 1720 y(allow)g(taking)g(advantage)h(of)g(control)f
(locality)m(.)31 b(Thus,)18 b(neither)d(of)h(the)-150 1770
y(systems)d(would)e(be)h(clearly)g(superior)g(on)g(future)f(caches,)k(and)d
(the)g(same)-150 1820 y(trade-of)o(fs)e(remain.)-108 1870 y(Our)j(results)h
(also)g(depend)g(on)g(program)g(granularity)m(.)26 b(Id/T)m(AM)13
b(pro-)-150 1920 y(grams)h(are)f(very)g(\256nely-grained,)g(with)f(threads)h
(containing)e(tens)i(of)g(in-)-150 1969 y(structions)c(and)i(quanta)f(a)h
(few)g(hundred.)k(From)10 b(the)g(better)g(performance)-150
2019 y(of)g(the)g(message-driven)h(approach)f(on)g(the)g(coarser)o(-grained)h
(benchmark)-150 2069 y(programs,)17 b(we)f(can)g(conclude)g(that)f(its)f
(relative)i(performance)g(will)e(be)-150 2119 y(even)d(stronger)e(for)h
(programming)f(systems)i(with)e(coarser)j(granularity)m(.)-150
2258 y Fj(Acknowledgments)-150 2351 y Fn(W)m(e)i(are)g(grateful)f(to)f(David)
h(Culler)n(,)h(Seth)f(Goldstein,)g(Klaus)h(Schauser)n(,)-150
2401 y(and)f(Thorsten)g(von)g(Eicken)h(for)f(sharing)f(their)h(systems)h(and)
f(expertise.)-150 2450 y(W)m(e)d(are)g(also)f(grateful)f(to)h(the)g(MIT)g
(Computation)e(Structures)i(Group)f(and)-150 2500 y(Concurrent)e(VLSI)h
(Architecture)g(group)f(for)h(the)g(compiler)f(and)h(simulator)-150
2550 y(infrastructure)12 b(they)h(provided.)22 b(W)m(e)14 b(received)g
(valuable)f(comments)h(on)996 42 y(this)j(work)g(and)h(its)f(presentation)g
(from)h(the)f(above)h(people)g(and)g(Fred)996 91 y(Chong,)c(Michael)f(Ernst,)
i(Bob)e(Gruber)n(,)i(Bradley)f(Kuszmaul,)h(Rishiyur)996 141
y(Nikhil,)j(Nate)g(Osgood,)h(Bjarne)f(Steensgaard,)i(Debby)e(W)m(allach,)i
(and)996 191 y(Daniel)10 b(W)m(eise.)1037 241 y(This)i(work)g(was)h
(supported)d(in)i(part)g(by)f(the)h(Defense)i(Advanced)e(Re-)996
291 y(search)20 b(Projects)f(Agency)g(under)g(contracts)g(N00014-88K-0738)d
(and)996 341 y(N00014-87K-0825,)f(by)h(a)h(National)e(Science)j(Foundation)c
(Presiden-)996 391 y(tial)8 b(Y)l(oung)h(Investigator)f(A)l(ward,)i(grant)f
(MIP-8657531,)f(with)g(matching)996 441 y(funds)f(from)g(General)h(Electric)f
(Corporation)f(and)h(IBM)g(Corporation,)f(and)996 490 y(by)12
b(a)h(National)e(Science)j(Foundation)d(Graduate)h(Fellowship.)21
b(This)12 b(pa-)996 540 y(per)g(was)h(written)e(while)g(the)h(\256rst)g
(author)f(was)i(employed)f(by)f(Microsoft)996 590 y(Research.)996
733 y Fj(Refer)o(ences)996 827 y Fn([AHN88])66 b(Arvind,)9
b(S.)i(K.)g(Heller)n(,)f(and)h(R.)f(S.)h(Nikhil.)j(Programming)1222
877 y(generality)i(and)i(parallel)f(computers.)34 b(In)17 b
Fh(Pr)n(oceedings)1222 927 y(of)i(the)g Fn(4)1365 912 y Fa(th)1418
927 y Fh(International)e(Symposium)i(on)g(Biological)1222 977
y(and)c(Arti\256cial)f(Intelligence)h(Systems)p Fn(,)j(pages)e(255\261286,)
1222 1026 y(T)o(rento,)10 b(Italy)m(,)g(September)h(1988.)e(ESCOM)i
(\(Leider\).)996 1112 y([CGSvE93])29 b(D.)16 b(E.)h(Culler)n(,)h(S.)f(C.)f
(Goldstein,)h(K.)f(E.)i(Schauser)n(,)h(and)1222 1162 y(T)m(.)i(von)e(Eicken.)
42 b(T)m(AM)20 b(\320)g(A)g(Compiler)f(Controlled)1222 1212
y(Threaded)11 b(Abstract)e(Machine.)16 b Fh(Journal)9 b(of)g(Parallel)h(and)
1222 1261 y(Distributed)e(Computing)p Fn(,)g(18:347\261370,)g(July)i(1993.)
996 1347 y([CSS)1084 1332 y Fi(+)1111 1347 y Fn(91])55 b(D.)14
b(Culler)n(,)h(A.)g(Sah,)h(K.)f(Schauser)n(,)h(T)m(.)f(von)f(Eicken,)i(and)
1222 1397 y(J.)21 b(W)m(awrzynek.)44 b(Fine-grain)20 b(Parallelism)h(with)f
(Min-)1222 1447 y(imal)25 b(Hardware)h(Support:)42 b(A)26 b(Compiler)o
(-Control)o(led)1222 1496 y(Threaded)20 b(Abstract)g(Machine.)40
b(In)20 b Fh(Pr)n(oc.)h(of)f(4th)f(Int.)1222 1546 y(Conf.)j(on)g(Ar)n
(chitectural)h(Support)e(for)i(Pr)n(ogramming)1222 1596 y(Languages)8
b(and)h(Operating)f(Systems)p Fn(,)i(Santa-Clara,)g(CA,)1222
1646 y(April)19 b(1991.)42 b(\(Also)20 b(available)h(as)g(T)m(echnical)h
(Report)1222 1696 y(UCB/CSD)9 b(91/591,)h(CS)h(Div)m(.,)g(University)e(of)i
(California)1222 1745 y(at)f(Berkeley\).)996 1831 y([D)1040
1816 y Fi(+)1067 1831 y Fn(87])99 b(W)n(illiam)15 b(J.)h(Dally)f(et)h(al.)30
b(Architecture)15 b(of)g(a)i(message-)1222 1881 y(driven)8
b(processor)n(.)14 b(In)9 b Fh(Pr)n(oceedings)i(of)e(the)g(14th)g(Interna-)
1222 1931 y(tional)j(Symposium)i(on)h(Computer)f(Ar)n(chitectur)n(e)p
Fn(,)j(pages)1222 1980 y(189\261205.)9 b(IEEE,)i(June)g(1987.)996
2066 y([DFK)1093 2051 y Fi(+)1120 2066 y Fn(92])46 b(W)n(illiam)14
b(J.)i(Dally)m(,)h(J.)f(A.)g(Stuart)e(Fiske,)j(John)e(S.)h(Keen,)1222
2116 y(Richard)6 b(A.)i(Lethin,)g(Michael)f(D.)h(Noakes,)h(Peter)e(R.)h
(Nuth,)1222 2166 y(Roy)f(E.)h(Davison,)h(and)e(Gregory)h(A.)g(Fyler)n(.)i
(The)f(Message-)1222 2215 y(Driven)g(Processor:)16 b(A)10 b(multicomputer)f
(processing)h(node)1222 2265 y(with)5 b(ef)o(\256cient)j(mechanisms.)i
Fh(IEEE)e(Micr)n(o)p Fn(,)g(12\(2\):23\26139,)1222 2315 y(April)h(1992.)996
2401 y([KWW)1118 2385 y Fi(+)1145 2401 y Fn(94])21 b(M.)14
b(Frans)h(Kaashoek,)h(W)n(illiam)e(E.)h(W)m(eihl,)g(Deborah)g(A.)1222
2450 y(W)m(allach,)8 b(W)n(ilson)f(C.)g(Hsieh,)i(and)e(Kirk)g(L.)h(Johnson.)h
(Opti-)1222 2500 y(mistic)e(active)i(messages:)15 b(Structuring)6
b(systems)j(for)e(high-)1222 2550 y(performance)15 b(communication.)24
b(In)14 b Fh(Sixth)f(SIGOPS)h(Eu-)965 2675 y Fn(9)p eop
%%Page: 10 10
9 bop 76 42 a Fh(r)n(opean)16 b(W)l(orkshop:)26 b(Matching)14
b(Operating)g(Systems)j(to)76 91 y(Application)8 b(Needs)p
Fn(,)j(September)g(1994.)-150 172 y([MB91])91 b(Jef)o(frey)20
b(C.)g(Mogul)e(and)i(Anita)f(Bor)o(g.)39 b(The)20 b(ef)o(fect)h(of)76
221 y(context)15 b(switches)g(on)g(cache)j(performance.)30
b(In)15 b Fh(Fourth)76 271 y(International)h(Confer)n(ence)k(on)f(Ar)n
(chitectural)g(Support)76 321 y(for)8 b(Pr)n(ogramming)f(Languages)h(and)f
(Operating)g(Systems)p Fn(,)76 371 y(Santa)j(Clara,)h(California,)e(April)g
(1991.)15 b(DEC.)-150 451 y([Nik91])93 b(R.)18 b(S.)h(Nikhil.)35
b(Id)18 b(\(version)f(90.1\))h(reference)i(manual.)76 501 y(CSG)d(Memo)h
(284-2,)h(MIT)e(Laboratory)g(for)g(Computer)76 551 y(Science,)k(545)c(T)m
(echnology)g(Square,)j(Cambridge,)f(MA)76 600 y(02139,)9 b(USA,)i(July)f
(1991.)-150 681 y([Nik93])93 b(Rishiyur)9 b(S.)j(Nikhil.)17
b(A)11 b(multithreaded)g(implementation)76 730 y(of)16 b(Id)g(using)f(P-RISC)
h(graphs.)31 b(In)15 b Fh(Pr)n(oceedings)j(of)e(the)76 780
y(W)l(orkshop)11 b(on)g(Languages)g(and)g(Compilers)g(for)g(Parallel)76
830 y(Computing)p Fn(,)d(Portland,)i(OR,)g(1993.)-150 910 y([Sch91])94
b(Klaus)27 b(Erik)f(Schauser)n(.)60 b(Compiling)25 b(data\257ow)i(into)76
960 y(threads.)13 b(Master)r(')n(s)c(thesis,)g(Computer)g(Science)h
(Division,)76 1010 y(University)e(of)i(California)f(at)h(Berkeley)m(,)h
(1991.)-150 1090 y([SGS)-60 1075 y Fi(+)-32 1090 y Fn(93])52
b(Ellen)21 b(Spertus,)j(Seth)d(Copen)g(Goldstein,)i(Klaus)e(Erik)76
1140 y(Schauser)n(,)12 b(Thorsten)e(von)g(Eicken,)i(David)e(E.)h(Culler)n(,)f
(and)76 1190 y(W)n(illiam)f(J.)i(Dally)m(.)j(Evaluation)8 b(of)i(mechanisms)h
(for)e(\256ne-)76 1239 y(grained)14 b(parallel)g(programs)h(in)f(the)h
(J-Machine)g(and)g(the)76 1289 y(CM-5.)26 b(In)15 b Fh(Pr)n(oceedings)h(of)e
(the)h(International)d(Sympo-)76 1339 y(sium)c(on)g(Computer)f(Ar)n
(chitectur)n(e)p Fn(,)k(pages)e(302\261313,)e(May)76 1389 y(1993.)-150
1469 y([Spe92])94 b(Ellen)14 b(Spertus.)27 b(Execution)14 b(of)g(Data\257ow)h
(Programs)g(on)76 1519 y(General-Purpose)c(Hardware.)17 b(Master)r(')n(s)10
b(thesis,)h(Depart-)76 1569 y(ment)k(of)g(EECS,)h(Massachusetts)g(Institute)d
(of)i(T)m(echnol-)76 1618 y(ogy,)23 b(545)e(T)m(ech.)i(Square,)h(Cambridge,)g
(MA,)d(August)76 1668 y(1992.)15 b(T)m(o)d(be)f(expanded)g(and)f(released)i
(as)g(T)m(echnical)f(Re-)76 1718 y(port)e(1380.)-150 1798 y([TCS92])80
b(K.)9 b(R.)h(T)o(raub,)f(D.)h(E.)g(Culler)n(,)f(and)g(K.)g(E.)h(Schauser)n
(.)k(Global)76 1848 y(analysis)e(for)g(partitionin)o(g)e(non-strict)g
(programs)i(into)f(se-)76 1898 y(quential)e(threads.)15 b Fh(ACM)10
b(LISP)g(Pointers)p Fn(,)h(5\(1\):324\261334,)76 1948 y(1992.)17
b(Proceedings)11 b(of)g(the)h(1992)e(ACM)h(Conference)h(on)76
1998 y(LISP)f(and)f(Functional)f(Programming.)-150 2078 y([Thi92])98
b(Thinking)16 b(Machines)h(Corporation,)h(Cambridge,)h(Mas-)76
2128 y(sachusetts.)12 b Fh(The)c(Connection)f(Machine)g(CM-5)g(T)l(echnical)
76 2177 y(Summary)p Fn(,)j(January)h(1992.)-150 2258 y([vECGS92])29
b(Thorsten)15 b(von)g(Eicken,)i(David)e(E.)h(Culler)n(,)h(Seth)e(Copen)76
2307 y(Goldstein,)j(and)g(Klaus)f(Erik)g(Schauser)n(.)36 b(Active)17
b(Mes-)76 2357 y(sages:)23 b(a)15 b(Mechanism)g(for)f(Integrated)g
(Communication)76 2407 y(and)j(Computation.)32 b(In)17 b Fh(Pr)n(oc.)i(of)e
(the)g(19th)f(Int'l)g(Sym-)76 2457 y(posium)10 b(on)h(Computer)f(Ar)n
(chitectur)n(e)p Fn(,)j(Gold)d(Coast,)i(Aus-)76 2507 y(tralia,)e(May)g(1992.)
954 2675 y(10)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
